
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocGELEEQNEGTLTORleftADDSUBleftMULDIVrightUNARYACCEPT ADAPT ADD AND COMMENTS DIV ELSE EQ EQUAL FLOAT FLOAT_VALUE FOR FUNC GE GT IDENTIFIER IF INIT INT INT_VALUE LE LT MUL NE OR PRINT RETURN STRING STRING_VALUE SUB UNARY VOID WHILE WHITESPACEprogram : programStartprogramStart : FUNC INIT "(" ")" "{" statements "}" statements : statement\n                  | statements statementstatement : function_calls\n                | condition\n                | function_declarations\n                | expression\n                | loops\n                | RETURN variable\n                | PRINT "(" variable ")"\n                | PRINT "(" STRING_VALUE ")"function_declarations : function_declarationfunction_declaration : FUNC IDENTIFIER "(" ")" ":" datatype "{" function_body "}" function_body : statementsfunction_calls : IDENTIFIER "(" ")"\n                     | IDENTIFIER "(" ")" function_calls\n                     | IDENTIFIER "(" parameters ")" \n                     | IDENTIFIER "(" parameters ")" function_callsparameters : parameterListparameterList : parameter\n                    | parameter "," parameterListparameter : datatype IDENTIFIERdatatype : INT\n                    | FLOAT\n                    | STRING\n                    | ADAPT\n                    | VOIDexpression : atoms\n                    | paren_expr\n                    | binary_expratoms : INT_VALUE\n                | FLOAT_VALUE\n                | STRING_VALUE\n                | variablevariable : IDENTIFIER paren_expr : "(" expression ")"binary_expr : atoms ADD expression\n                    | atoms SUB expression\n                    | atoms MUL expression\n                    | atoms DIV expression\n                    | atoms OR expression\n                    | atoms LE expression\n                    | atoms GE expression\n                    | atoms EQ expression\n                    | atoms NE expression\n                    | atoms GT expression\n                    | atoms LT expression\n                    | UNARY atoms\n                    | atoms UNARYcondition : IF expression "{" statements "}"\n                    | IF expression "{" statements "}" ELSE "{" statements "}"loops : loop\n                | loop loopsloop : forLoop\n                | whileLoopforLoop : FOR "(" expression ";" condition ";" expression ")" "{" statements "}"whileLoop : WHILE "(" condition ")" "{" statements "}"'
    
_lr_action_items = {'FUNC':([0,7,10,11,12,13,14,15,16,18,20,21,23,24,25,26,27,28,29,31,32,37,39,40,55,56,57,61,64,74,75,76,77,78,79,80,81,82,83,84,85,89,90,92,93,96,100,102,104,108,109,110,112,114,115,117,118,119,120,121,],[3,8,8,-3,-5,-6,-7,-8,-9,-35,-34,-36,-13,-29,-30,-31,-53,-32,-33,-55,-56,-36,-4,-10,-50,-54,-49,-37,-16,8,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-11,-12,-17,-18,8,-19,-51,8,8,8,8,-58,8,8,-14,-52,8,8,-57,]),'$end':([1,2,38,],[0,-1,-2,]),'INIT':([3,],[4,]),'(':([4,7,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,37,39,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,64,74,75,76,77,78,79,80,81,82,83,84,85,89,90,91,92,93,96,100,102,104,107,108,109,110,112,114,115,117,118,119,120,121,],[5,9,9,9,-3,-5,-6,-7,-8,-9,-35,41,-34,42,9,-13,-29,-30,-31,-53,-32,-33,-55,-56,58,59,60,-36,-4,-10,9,9,9,9,9,9,9,9,9,9,9,-50,-54,-49,9,-37,-16,9,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-11,-12,42,-17,-18,9,-19,-51,9,9,9,9,9,-58,9,9,-14,-52,9,9,-57,]),')':([5,18,20,24,25,26,28,29,36,37,42,55,57,60,61,62,63,65,66,67,75,76,77,78,79,80,81,82,83,84,85,87,95,101,102,111,118,],[6,-35,-34,-29,-30,-31,-32,-33,61,-36,64,-50,-49,88,-37,89,90,93,-20,-21,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,98,-23,-22,-51,116,-52,]),'{':([6,18,20,24,25,26,28,29,37,43,55,57,61,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,98,105,106,116,],[7,-35,-34,-29,-30,-31,-32,-33,-36,74,-50,-49,-37,-24,-25,-26,-27,-28,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,104,109,110,119,]),'RETURN':([7,10,11,12,13,14,15,16,18,20,21,23,24,25,26,27,28,29,31,32,37,39,40,55,56,57,61,64,74,75,76,77,78,79,80,81,82,83,84,85,89,90,92,93,96,100,102,104,108,109,110,112,114,115,117,118,119,120,121,],[17,17,-3,-5,-6,-7,-8,-9,-35,-34,-36,-13,-29,-30,-31,-53,-32,-33,-55,-56,-36,-4,-10,-50,-54,-49,-37,-16,17,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-11,-12,-17,-18,17,-19,-51,17,17,17,17,-58,17,17,-14,-52,17,17,-57,]),'PRINT':([7,10,11,12,13,14,15,16,18,20,21,23,24,25,26,27,28,29,31,32,37,39,40,55,56,57,61,64,74,75,76,77,78,79,80,81,82,83,84,85,89,90,92,93,96,100,102,104,108,109,110,112,114,115,117,118,119,120,121,],[19,19,-3,-5,-6,-7,-8,-9,-35,-34,-36,-13,-29,-30,-31,-53,-32,-33,-55,-56,-36,-4,-10,-50,-54,-49,-37,-16,19,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-11,-12,-17,-18,19,-19,-51,19,19,19,19,-58,19,19,-14,-52,19,19,-57,]),'IDENTIFIER':([7,8,9,10,11,12,13,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,37,39,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,64,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,89,90,92,93,96,100,102,104,107,108,109,110,112,114,115,117,118,119,120,121,],[21,35,37,21,-3,-5,-6,-7,-8,-9,37,-35,-34,-36,37,-13,-29,-30,-31,-53,-32,-33,37,-55,-56,-36,-4,-10,37,37,37,37,37,37,37,37,37,37,37,37,-50,-54,-49,37,-37,91,95,-24,-25,-26,-27,-28,21,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-11,-12,-17,91,21,-19,-51,21,37,21,21,21,-58,21,21,-14,-52,21,21,-57,]),'IF':([7,10,11,12,13,14,15,16,18,20,21,23,24,25,26,27,28,29,31,32,37,39,40,55,56,57,59,61,64,74,75,76,77,78,79,80,81,82,83,84,85,89,90,92,93,96,97,100,102,104,108,109,110,112,114,115,117,118,119,120,121,],[22,22,-3,-5,-6,-7,-8,-9,-35,-34,-36,-13,-29,-30,-31,-53,-32,-33,-55,-56,-36,-4,-10,-50,-54,-49,22,-37,-16,22,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-11,-12,-17,-18,22,22,-19,-51,22,22,22,22,-58,22,22,-14,-52,22,22,-57,]),'INT_VALUE':([7,9,10,11,12,13,14,15,16,18,20,21,22,23,24,25,26,27,28,29,30,31,32,37,39,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,64,74,75,76,77,78,79,80,81,82,83,84,85,89,90,92,93,96,100,102,104,107,108,109,110,112,114,115,117,118,119,120,121,],[28,28,28,-3,-5,-6,-7,-8,-9,-35,-34,-36,28,-13,-29,-30,-31,-53,-32,-33,28,-55,-56,-36,-4,-10,28,28,28,28,28,28,28,28,28,28,28,-50,-54,-49,28,-37,-16,28,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-11,-12,-17,-18,28,-19,-51,28,28,28,28,28,-58,28,28,-14,-52,28,28,-57,]),'FLOAT_VALUE':([7,9,10,11,12,13,14,15,16,18,20,21,22,23,24,25,26,27,28,29,30,31,32,37,39,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,64,74,75,76,77,78,79,80,81,82,83,84,85,89,90,92,93,96,100,102,104,107,108,109,110,112,114,115,117,118,119,120,121,],[29,29,29,-3,-5,-6,-7,-8,-9,-35,-34,-36,29,-13,-29,-30,-31,-53,-32,-33,29,-55,-56,-36,-4,-10,29,29,29,29,29,29,29,29,29,29,29,-50,-54,-49,29,-37,-16,29,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-11,-12,-17,-18,29,-19,-51,29,29,29,29,29,-58,29,29,-14,-52,29,29,-57,]),'STRING_VALUE':([7,9,10,11,12,13,14,15,16,18,20,21,22,23,24,25,26,27,28,29,30,31,32,37,39,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,64,74,75,76,77,78,79,80,81,82,83,84,85,89,90,92,93,96,100,102,104,107,108,109,110,112,114,115,117,118,119,120,121,],[20,20,20,-3,-5,-6,-7,-8,-9,-35,-34,-36,20,-13,-29,-30,-31,-53,-32,-33,20,-55,-56,-36,-4,-10,63,20,20,20,20,20,20,20,20,20,20,20,-50,-54,-49,20,-37,-16,20,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-11,-12,-17,-18,20,-19,-51,20,20,20,20,20,-58,20,20,-14,-52,20,20,-57,]),'UNARY':([7,9,10,11,12,13,14,15,16,18,20,21,22,23,24,25,26,27,28,29,31,32,37,39,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,64,74,75,76,77,78,79,80,81,82,83,84,85,89,90,92,93,96,100,102,104,107,108,109,110,112,114,115,117,118,119,120,121,],[30,30,30,-3,-5,-6,-7,-8,-9,-35,-34,-36,30,-13,55,-30,-31,-53,-32,-33,-55,-56,-36,-4,-10,30,30,30,30,30,30,30,30,30,30,30,-50,-54,-49,30,-37,-16,30,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-11,-12,-17,-18,30,-19,-51,30,30,30,30,30,-58,30,30,-14,-52,30,30,-57,]),'FOR':([7,10,11,12,13,14,15,16,18,20,21,23,24,25,26,27,28,29,31,32,37,39,40,55,56,57,61,64,74,75,76,77,78,79,80,81,82,83,84,85,89,90,92,93,96,100,102,104,108,109,110,112,114,115,117,118,119,120,121,],[33,33,-3,-5,-6,-7,-8,-9,-35,-34,-36,-13,-29,-30,-31,33,-32,-33,-55,-56,-36,-4,-10,-50,-54,-49,-37,-16,33,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-11,-12,-17,-18,33,-19,-51,33,33,33,33,-58,33,33,-14,-52,33,33,-57,]),'WHILE':([7,10,11,12,13,14,15,16,18,20,21,23,24,25,26,27,28,29,31,32,37,39,40,55,56,57,61,64,74,75,76,77,78,79,80,81,82,83,84,85,89,90,92,93,96,100,102,104,108,109,110,112,114,115,117,118,119,120,121,],[34,34,-3,-5,-6,-7,-8,-9,-35,-34,-36,-13,-29,-30,-31,34,-32,-33,-55,-56,-36,-4,-10,-50,-54,-49,-37,-16,34,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-11,-12,-17,-18,34,-19,-51,34,34,34,34,-58,34,34,-14,-52,34,34,-57,]),'}':([10,11,12,13,14,15,16,18,20,21,23,24,25,26,27,28,29,31,32,37,39,40,55,56,57,61,64,75,76,77,78,79,80,81,82,83,84,85,89,90,92,93,96,100,102,108,112,113,114,115,117,118,120,121,],[38,-3,-5,-6,-7,-8,-9,-35,-34,-36,-13,-29,-30,-31,-53,-32,-33,-55,-56,-36,-4,-10,-50,-54,-49,-37,-16,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-11,-12,-17,-18,102,-19,-51,112,-58,117,-15,118,-14,-52,121,-57,]),'ADD':([18,20,21,24,28,29,37,],[-35,-34,-36,44,-32,-33,-36,]),'SUB':([18,20,21,24,28,29,37,],[-35,-34,-36,45,-32,-33,-36,]),'MUL':([18,20,21,24,28,29,37,],[-35,-34,-36,46,-32,-33,-36,]),'DIV':([18,20,21,24,28,29,37,],[-35,-34,-36,47,-32,-33,-36,]),'OR':([18,20,21,24,28,29,37,],[-35,-34,-36,48,-32,-33,-36,]),'LE':([18,20,21,24,28,29,37,],[-35,-34,-36,49,-32,-33,-36,]),'GE':([18,20,21,24,28,29,37,],[-35,-34,-36,50,-32,-33,-36,]),'EQ':([18,20,21,24,28,29,37,],[-35,-34,-36,51,-32,-33,-36,]),'NE':([18,20,21,24,28,29,37,],[-35,-34,-36,52,-32,-33,-36,]),'GT':([18,20,21,24,28,29,37,],[-35,-34,-36,53,-32,-33,-36,]),'LT':([18,20,21,24,28,29,37,],[-35,-34,-36,54,-32,-33,-36,]),';':([18,20,24,25,26,28,29,37,55,57,61,75,76,77,78,79,80,81,82,83,84,85,86,102,103,118,],[-35,-34,-29,-30,-31,-32,-33,-36,-50,-49,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,97,-51,107,-52,]),'INT':([42,94,99,],[69,69,69,]),'FLOAT':([42,94,99,],[70,70,70,]),'STRING':([42,94,99,],[71,71,71,]),'ADAPT':([42,94,99,],[72,72,72,]),'VOID':([42,94,99,],[73,73,73,]),',':([67,95,],[94,-23,]),':':([88,],[99,]),'ELSE':([102,],[106,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'programStart':([0,],[2,]),'statements':([7,74,104,109,110,119,],[10,96,108,114,115,120,]),'statement':([7,10,74,96,104,108,109,110,114,115,119,120,],[11,39,11,39,11,39,11,11,39,39,11,39,]),'function_calls':([7,10,64,74,93,96,104,108,109,110,114,115,119,120,],[12,12,92,12,100,12,12,12,12,12,12,12,12,12,]),'condition':([7,10,59,74,96,97,104,108,109,110,114,115,119,120,],[13,13,87,13,13,103,13,13,13,13,13,13,13,13,]),'function_declarations':([7,10,74,96,104,108,109,110,114,115,119,120,],[14,14,14,14,14,14,14,14,14,14,14,14,]),'expression':([7,9,10,22,44,45,46,47,48,49,50,51,52,53,54,58,74,96,104,107,108,109,110,114,115,119,120,],[15,36,15,43,75,76,77,78,79,80,81,82,83,84,85,86,15,15,15,111,15,15,15,15,15,15,15,]),'loops':([7,10,27,74,96,104,108,109,110,114,115,119,120,],[16,16,56,16,16,16,16,16,16,16,16,16,16,]),'variable':([7,9,10,17,22,30,41,44,45,46,47,48,49,50,51,52,53,54,58,74,96,104,107,108,109,110,114,115,119,120,],[18,18,18,40,18,18,62,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'function_declaration':([7,10,74,96,104,108,109,110,114,115,119,120,],[23,23,23,23,23,23,23,23,23,23,23,23,]),'atoms':([7,9,10,22,30,44,45,46,47,48,49,50,51,52,53,54,58,74,96,104,107,108,109,110,114,115,119,120,],[24,24,24,24,57,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'paren_expr':([7,9,10,22,44,45,46,47,48,49,50,51,52,53,54,58,74,96,104,107,108,109,110,114,115,119,120,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'binary_expr':([7,9,10,22,44,45,46,47,48,49,50,51,52,53,54,58,74,96,104,107,108,109,110,114,115,119,120,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'loop':([7,10,27,74,96,104,108,109,110,114,115,119,120,],[27,27,27,27,27,27,27,27,27,27,27,27,27,]),'forLoop':([7,10,27,74,96,104,108,109,110,114,115,119,120,],[31,31,31,31,31,31,31,31,31,31,31,31,31,]),'whileLoop':([7,10,27,74,96,104,108,109,110,114,115,119,120,],[32,32,32,32,32,32,32,32,32,32,32,32,32,]),'parameters':([42,],[65,]),'parameterList':([42,94,],[66,101,]),'parameter':([42,94,],[67,67,]),'datatype':([42,94,99,],[68,68,105,]),'function_body':([109,],[113,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> programStart','program',1,'p_program','adapscriptyacc.py',15),
  ('programStart -> FUNC INIT ( ) { statements }','programStart',7,'p_programStart','adapscriptyacc.py',19),
  ('statements -> statement','statements',1,'p_statements','adapscriptyacc.py',23),
  ('statements -> statements statement','statements',2,'p_statements','adapscriptyacc.py',24),
  ('statement -> function_calls','statement',1,'p_statement','adapscriptyacc.py',27),
  ('statement -> condition','statement',1,'p_statement','adapscriptyacc.py',28),
  ('statement -> function_declarations','statement',1,'p_statement','adapscriptyacc.py',29),
  ('statement -> expression','statement',1,'p_statement','adapscriptyacc.py',30),
  ('statement -> loops','statement',1,'p_statement','adapscriptyacc.py',31),
  ('statement -> RETURN variable','statement',2,'p_statement','adapscriptyacc.py',32),
  ('statement -> PRINT ( variable )','statement',4,'p_statement','adapscriptyacc.py',33),
  ('statement -> PRINT ( STRING_VALUE )','statement',4,'p_statement','adapscriptyacc.py',34),
  ('function_declarations -> function_declaration','function_declarations',1,'p_function_declarations','adapscriptyacc.py',38),
  ('function_declaration -> FUNC IDENTIFIER ( ) : datatype { function_body }','function_declaration',9,'p_function_declaration','adapscriptyacc.py',41),
  ('function_body -> statements','function_body',1,'p_function_body','adapscriptyacc.py',45),
  ('function_calls -> IDENTIFIER ( )','function_calls',3,'p_function_calls','adapscriptyacc.py',48),
  ('function_calls -> IDENTIFIER ( ) function_calls','function_calls',4,'p_function_calls','adapscriptyacc.py',49),
  ('function_calls -> IDENTIFIER ( parameters )','function_calls',4,'p_function_calls','adapscriptyacc.py',50),
  ('function_calls -> IDENTIFIER ( parameters ) function_calls','function_calls',5,'p_function_calls','adapscriptyacc.py',51),
  ('parameters -> parameterList','parameters',1,'p_parameters','adapscriptyacc.py',54),
  ('parameterList -> parameter','parameterList',1,'p_parameterList','adapscriptyacc.py',57),
  ('parameterList -> parameter , parameterList','parameterList',3,'p_parameterList','adapscriptyacc.py',58),
  ('parameter -> datatype IDENTIFIER','parameter',2,'p_parameter','adapscriptyacc.py',61),
  ('datatype -> INT','datatype',1,'p_datatype','adapscriptyacc.py',64),
  ('datatype -> FLOAT','datatype',1,'p_datatype','adapscriptyacc.py',65),
  ('datatype -> STRING','datatype',1,'p_datatype','adapscriptyacc.py',66),
  ('datatype -> ADAPT','datatype',1,'p_datatype','adapscriptyacc.py',67),
  ('datatype -> VOID','datatype',1,'p_datatype','adapscriptyacc.py',68),
  ('expression -> atoms','expression',1,'p_expression','adapscriptyacc.py',72),
  ('expression -> paren_expr','expression',1,'p_expression','adapscriptyacc.py',73),
  ('expression -> binary_expr','expression',1,'p_expression','adapscriptyacc.py',74),
  ('atoms -> INT_VALUE','atoms',1,'p_atom','adapscriptyacc.py',77),
  ('atoms -> FLOAT_VALUE','atoms',1,'p_atom','adapscriptyacc.py',78),
  ('atoms -> STRING_VALUE','atoms',1,'p_atom','adapscriptyacc.py',79),
  ('atoms -> variable','atoms',1,'p_atom','adapscriptyacc.py',80),
  ('variable -> IDENTIFIER','variable',1,'p_variable','adapscriptyacc.py',83),
  ('paren_expr -> ( expression )','paren_expr',3,'p_paren_expr','adapscriptyacc.py',86),
  ('binary_expr -> atoms ADD expression','binary_expr',3,'p_binary_expr','adapscriptyacc.py',89),
  ('binary_expr -> atoms SUB expression','binary_expr',3,'p_binary_expr','adapscriptyacc.py',90),
  ('binary_expr -> atoms MUL expression','binary_expr',3,'p_binary_expr','adapscriptyacc.py',91),
  ('binary_expr -> atoms DIV expression','binary_expr',3,'p_binary_expr','adapscriptyacc.py',92),
  ('binary_expr -> atoms OR expression','binary_expr',3,'p_binary_expr','adapscriptyacc.py',93),
  ('binary_expr -> atoms LE expression','binary_expr',3,'p_binary_expr','adapscriptyacc.py',94),
  ('binary_expr -> atoms GE expression','binary_expr',3,'p_binary_expr','adapscriptyacc.py',95),
  ('binary_expr -> atoms EQ expression','binary_expr',3,'p_binary_expr','adapscriptyacc.py',96),
  ('binary_expr -> atoms NE expression','binary_expr',3,'p_binary_expr','adapscriptyacc.py',97),
  ('binary_expr -> atoms GT expression','binary_expr',3,'p_binary_expr','adapscriptyacc.py',98),
  ('binary_expr -> atoms LT expression','binary_expr',3,'p_binary_expr','adapscriptyacc.py',99),
  ('binary_expr -> UNARY atoms','binary_expr',2,'p_binary_expr','adapscriptyacc.py',100),
  ('binary_expr -> atoms UNARY','binary_expr',2,'p_binary_expr','adapscriptyacc.py',101),
  ('condition -> IF expression { statements }','condition',5,'p_condition','adapscriptyacc.py',104),
  ('condition -> IF expression { statements } ELSE { statements }','condition',9,'p_condition','adapscriptyacc.py',105),
  ('loops -> loop','loops',1,'p_loops','adapscriptyacc.py',108),
  ('loops -> loop loops','loops',2,'p_loops','adapscriptyacc.py',109),
  ('loop -> forLoop','loop',1,'p_loop','adapscriptyacc.py',113),
  ('loop -> whileLoop','loop',1,'p_loop','adapscriptyacc.py',114),
  ('forLoop -> FOR ( expression ; condition ; expression ) { statements }','forLoop',11,'p_forLoop','adapscriptyacc.py',118),
  ('whileLoop -> WHILE ( condition ) { statements }','whileLoop',7,'p_whileLoop','adapscriptyacc.py',121),
]
