Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    UMINUS

Grammar

Rule 0     S' -> program
Rule 1     program -> FUNC INIT LPAREN RPAREN { statements }
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> IDENTIFIER EQUAL expression
Rule 5     statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
Rule 6     statement -> INT IDENTIFIER EQUAL expression
Rule 7     statement -> FLOAT IDENTIFIER EQUAL expression
Rule 8     statement -> STR IDENTIFIER EQUAL expression
Rule 9     statement -> ADAPT IDENTIFIER EQUAL expression
Rule 10    statement -> expression
Rule 11    statement -> PRINT LPAREN expression RPAREN
Rule 12    statement -> PRINT LPAREN STRING_VALUE RPAREN
Rule 13    statement -> RETURN expression
Rule 14    expression -> expression ADD expression
Rule 15    expression -> expression SUB expression
Rule 16    expression -> expression DIV expression
Rule 17    expression -> expression MUL expression
Rule 18    expression -> SUB expression
Rule 19    expression -> LPAREN expression RPAREN
Rule 20    expression -> expression LE expression
Rule 21    expression -> expression GE expression
Rule 22    expression -> expression EQ expression
Rule 23    expression -> expression NE expression
Rule 24    expression -> expression GT expression
Rule 25    expression -> expression LT expression
Rule 26    expression -> expression AND expression
Rule 27    expression -> expression OR expression
Rule 28    expression -> expression INCREMENT
Rule 29    expression -> DECREMENT expression
Rule 30    expressions -> expressions , expression
Rule 31    expressions -> expression
Rule 32    expressions -> <empty>
Rule 33    expression -> IDENTIFIER LPAREN expressions RPAREN
Rule 34    expression -> IF LPAREN expression RPAREN { statements } ELSE { statements }
Rule 35    expression -> IF LPAREN expression RPAREN { statements }
Rule 36    expression -> INT IDENTIFIER
Rule 37    expression -> FLOAT IDENTIFIER
Rule 38    expression -> STR IDENTIFIER
Rule 39    expression -> ADAPT IDENTIFIER
Rule 40    expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements }
Rule 41    expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
Rule 42    expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements }
Rule 43    expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements }
Rule 44    expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
Rule 45    expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
Rule 46    expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
Rule 47    expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
Rule 48    expression -> INT_VALUE
Rule 49    expression -> FLOAT_VALUE
Rule 50    expression -> STRING_VALUE
Rule 51    expression -> IDENTIFIER
Rule 52    expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements }
Rule 53    expression -> statement WHILE LPAREN expression RPAREN { statements }

Terminals, with rules where they appear

,                    : 30
:                    : 40 41 42 43 44 45 46 47
;                    : 52 52
ACCEPT               : 5
ADAPT                : 9 39
ADD                  : 14
AND                  : 26
DECREMENT            : 29
DIV                  : 16
ELSE                 : 34
EQ                   : 22
EQUAL                : 4 5 6 7 8 9
FLOAT                : 7 37 41 45
FLOAT_VALUE          : 49
FN                   : 40 41 42 43 44 45 46 47
FOR                  : 52
FUNC                 : 1
GE                   : 21
GT                   : 24
IDENTIFIER           : 4 5 6 7 8 9 33 36 37 38 39 40 41 42 43 44 45 46 47 51
IF                   : 34 35
INCREMENT            : 28
INIT                 : 1
INT                  : 6 36 40 44
INT_VALUE            : 48
LE                   : 20
LPAREN               : 1 5 11 12 19 33 34 35 40 41 42 43 44 45 46 47 52 53
LT                   : 25
MUL                  : 17
NE                   : 23
OR                   : 27
PRINT                : 11 12
RETURN               : 13
RPAREN               : 1 5 11 12 19 33 34 35 40 41 42 43 44 45 46 47 52 53
STR                  : 8 38 42 46
STRING_VALUE         : 12 50
SUB                  : 15 18
UMINUS               : 
VOID                 : 43 47
WHILE                : 53
error                : 
{                    : 1 34 34 35 40 41 42 43 44 45 46 47 52 53
}                    : 1 34 34 35 40 41 42 43 44 45 46 47 52 53

Nonterminals, with rules where they appear

expression           : 4 6 7 8 9 10 11 13 14 14 15 15 16 16 17 17 18 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 29 30 31 34 35 52 52 53
expressions          : 30 33 44 45 46 47
program              : 0
statement            : 2 3 52 53
statements           : 1 2 34 34 35 40 41 42 43 44 45 46 47 52 53

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . FUNC INIT LPAREN RPAREN { statements }

    FUNC            shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> FUNC . INIT LPAREN RPAREN { statements }

    INIT            shift and go to state 3


state 3

    (1) program -> FUNC INIT . LPAREN RPAREN { statements }

    LPAREN          shift and go to state 4


state 4

    (1) program -> FUNC INIT LPAREN . RPAREN { statements }

    RPAREN          shift and go to state 5


state 5

    (1) program -> FUNC INIT LPAREN RPAREN . { statements }

    {               shift and go to state 6


state 6

    (1) program -> FUNC INIT LPAREN RPAREN { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statements                     shift and go to state 8
    statement                      shift and go to state 9
    expression                     shift and go to state 11

state 7

    (19) expression -> LPAREN . expression RPAREN
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 26
    statement                      shift and go to state 32

state 8

    (1) program -> FUNC INIT LPAREN RPAREN { statements . }
    (2) statements -> statements . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    }               shift and go to state 33
    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statement                      shift and go to state 34
    expression                     shift and go to state 11

state 9

    (3) statements -> statement .
    (53) expression -> statement . WHILE LPAREN expression RPAREN { statements }

    }               reduce using rule 3 (statements -> statement .)
    IDENTIFIER      reduce using rule 3 (statements -> statement .)
    INT             reduce using rule 3 (statements -> statement .)
    FLOAT           reduce using rule 3 (statements -> statement .)
    STR             reduce using rule 3 (statements -> statement .)
    ADAPT           reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    RETURN          reduce using rule 3 (statements -> statement .)
    SUB             reduce using rule 3 (statements -> statement .)
    LPAREN          reduce using rule 3 (statements -> statement .)
    DECREMENT       reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    FN              reduce using rule 3 (statements -> statement .)
    INT_VALUE       reduce using rule 3 (statements -> statement .)
    FLOAT_VALUE     reduce using rule 3 (statements -> statement .)
    STRING_VALUE    reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    WHILE           shift and go to state 35


state 10

    (4) statement -> IDENTIFIER . EQUAL expression
    (5) statement -> IDENTIFIER . EQUAL ACCEPT LPAREN RPAREN
    (33) expression -> IDENTIFIER . LPAREN expressions RPAREN
    (51) expression -> IDENTIFIER .

  ! shift/reduce conflict for LPAREN resolved as shift
    EQUAL           shift and go to state 36
    LPAREN          shift and go to state 37
    ADD             reduce using rule 51 (expression -> IDENTIFIER .)
    SUB             reduce using rule 51 (expression -> IDENTIFIER .)
    DIV             reduce using rule 51 (expression -> IDENTIFIER .)
    MUL             reduce using rule 51 (expression -> IDENTIFIER .)
    LE              reduce using rule 51 (expression -> IDENTIFIER .)
    GE              reduce using rule 51 (expression -> IDENTIFIER .)
    EQ              reduce using rule 51 (expression -> IDENTIFIER .)
    NE              reduce using rule 51 (expression -> IDENTIFIER .)
    GT              reduce using rule 51 (expression -> IDENTIFIER .)
    LT              reduce using rule 51 (expression -> IDENTIFIER .)
    AND             reduce using rule 51 (expression -> IDENTIFIER .)
    OR              reduce using rule 51 (expression -> IDENTIFIER .)
    INCREMENT       reduce using rule 51 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 51 (expression -> IDENTIFIER .)
    }               reduce using rule 51 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 51 (expression -> IDENTIFIER .)
    INT             reduce using rule 51 (expression -> IDENTIFIER .)
    FLOAT           reduce using rule 51 (expression -> IDENTIFIER .)
    STR             reduce using rule 51 (expression -> IDENTIFIER .)
    ADAPT           reduce using rule 51 (expression -> IDENTIFIER .)
    PRINT           reduce using rule 51 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 51 (expression -> IDENTIFIER .)
    DECREMENT       reduce using rule 51 (expression -> IDENTIFIER .)
    IF              reduce using rule 51 (expression -> IDENTIFIER .)
    FN              reduce using rule 51 (expression -> IDENTIFIER .)
    INT_VALUE       reduce using rule 51 (expression -> IDENTIFIER .)
    FLOAT_VALUE     reduce using rule 51 (expression -> IDENTIFIER .)
    STRING_VALUE    reduce using rule 51 (expression -> IDENTIFIER .)
    FOR             reduce using rule 51 (expression -> IDENTIFIER .)
    ;               reduce using rule 51 (expression -> IDENTIFIER .)

  ! LPAREN          [ reduce using rule 51 (expression -> IDENTIFIER .) ]


state 11

    (10) statement -> expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT

  ! shift/reduce conflict for SUB resolved as shift
    WHILE           reduce using rule 10 (statement -> expression .)
    }               reduce using rule 10 (statement -> expression .)
    IDENTIFIER      reduce using rule 10 (statement -> expression .)
    INT             reduce using rule 10 (statement -> expression .)
    FLOAT           reduce using rule 10 (statement -> expression .)
    STR             reduce using rule 10 (statement -> expression .)
    ADAPT           reduce using rule 10 (statement -> expression .)
    PRINT           reduce using rule 10 (statement -> expression .)
    RETURN          reduce using rule 10 (statement -> expression .)
    LPAREN          reduce using rule 10 (statement -> expression .)
    DECREMENT       reduce using rule 10 (statement -> expression .)
    IF              reduce using rule 10 (statement -> expression .)
    FN              reduce using rule 10 (statement -> expression .)
    INT_VALUE       reduce using rule 10 (statement -> expression .)
    FLOAT_VALUE     reduce using rule 10 (statement -> expression .)
    STRING_VALUE    reduce using rule 10 (statement -> expression .)
    FOR             reduce using rule 10 (statement -> expression .)
    ;               reduce using rule 10 (statement -> expression .)
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50

  ! SUB             [ reduce using rule 10 (statement -> expression .) ]


state 12

    (6) statement -> INT . IDENTIFIER EQUAL expression
    (36) expression -> INT . IDENTIFIER

    IDENTIFIER      shift and go to state 51


state 13

    (7) statement -> FLOAT . IDENTIFIER EQUAL expression
    (37) expression -> FLOAT . IDENTIFIER

    IDENTIFIER      shift and go to state 52


state 14

    (8) statement -> STR . IDENTIFIER EQUAL expression
    (38) expression -> STR . IDENTIFIER

    IDENTIFIER      shift and go to state 53


state 15

    (9) statement -> ADAPT . IDENTIFIER EQUAL expression
    (39) expression -> ADAPT . IDENTIFIER

    IDENTIFIER      shift and go to state 54


state 16

    (11) statement -> PRINT . LPAREN expression RPAREN
    (12) statement -> PRINT . LPAREN STRING_VALUE RPAREN

    LPAREN          shift and go to state 55


state 17

    (50) expression -> STRING_VALUE .

    ADD             reduce using rule 50 (expression -> STRING_VALUE .)
    SUB             reduce using rule 50 (expression -> STRING_VALUE .)
    DIV             reduce using rule 50 (expression -> STRING_VALUE .)
    MUL             reduce using rule 50 (expression -> STRING_VALUE .)
    LE              reduce using rule 50 (expression -> STRING_VALUE .)
    GE              reduce using rule 50 (expression -> STRING_VALUE .)
    EQ              reduce using rule 50 (expression -> STRING_VALUE .)
    NE              reduce using rule 50 (expression -> STRING_VALUE .)
    GT              reduce using rule 50 (expression -> STRING_VALUE .)
    LT              reduce using rule 50 (expression -> STRING_VALUE .)
    AND             reduce using rule 50 (expression -> STRING_VALUE .)
    OR              reduce using rule 50 (expression -> STRING_VALUE .)
    INCREMENT       reduce using rule 50 (expression -> STRING_VALUE .)
    WHILE           reduce using rule 50 (expression -> STRING_VALUE .)
    }               reduce using rule 50 (expression -> STRING_VALUE .)
    IDENTIFIER      reduce using rule 50 (expression -> STRING_VALUE .)
    INT             reduce using rule 50 (expression -> STRING_VALUE .)
    FLOAT           reduce using rule 50 (expression -> STRING_VALUE .)
    STR             reduce using rule 50 (expression -> STRING_VALUE .)
    ADAPT           reduce using rule 50 (expression -> STRING_VALUE .)
    PRINT           reduce using rule 50 (expression -> STRING_VALUE .)
    RETURN          reduce using rule 50 (expression -> STRING_VALUE .)
    LPAREN          reduce using rule 50 (expression -> STRING_VALUE .)
    DECREMENT       reduce using rule 50 (expression -> STRING_VALUE .)
    IF              reduce using rule 50 (expression -> STRING_VALUE .)
    FN              reduce using rule 50 (expression -> STRING_VALUE .)
    INT_VALUE       reduce using rule 50 (expression -> STRING_VALUE .)
    FLOAT_VALUE     reduce using rule 50 (expression -> STRING_VALUE .)
    STRING_VALUE    reduce using rule 50 (expression -> STRING_VALUE .)
    FOR             reduce using rule 50 (expression -> STRING_VALUE .)
    RPAREN          reduce using rule 50 (expression -> STRING_VALUE .)
    ;               reduce using rule 50 (expression -> STRING_VALUE .)
    ,               reduce using rule 50 (expression -> STRING_VALUE .)


state 18

    (13) statement -> RETURN . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 56
    statement                      shift and go to state 32

state 19

    (18) expression -> SUB . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 57
    statement                      shift and go to state 32

state 20

    (29) expression -> DECREMENT . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 58
    statement                      shift and go to state 32

state 21

    (34) expression -> IF . LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> IF . LPAREN expression RPAREN { statements }

    LPAREN          shift and go to state 59


state 22

    (40) expression -> FN . IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> FN . IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> FN . IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> FN . IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> FN . IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> FN . IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> FN . IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> FN . IDENTIFIER LPAREN expressions RPAREN : VOID { statements }

    IDENTIFIER      shift and go to state 60


state 23

    (48) expression -> INT_VALUE .

    ADD             reduce using rule 48 (expression -> INT_VALUE .)
    SUB             reduce using rule 48 (expression -> INT_VALUE .)
    DIV             reduce using rule 48 (expression -> INT_VALUE .)
    MUL             reduce using rule 48 (expression -> INT_VALUE .)
    LE              reduce using rule 48 (expression -> INT_VALUE .)
    GE              reduce using rule 48 (expression -> INT_VALUE .)
    EQ              reduce using rule 48 (expression -> INT_VALUE .)
    NE              reduce using rule 48 (expression -> INT_VALUE .)
    GT              reduce using rule 48 (expression -> INT_VALUE .)
    LT              reduce using rule 48 (expression -> INT_VALUE .)
    AND             reduce using rule 48 (expression -> INT_VALUE .)
    OR              reduce using rule 48 (expression -> INT_VALUE .)
    INCREMENT       reduce using rule 48 (expression -> INT_VALUE .)
    WHILE           reduce using rule 48 (expression -> INT_VALUE .)
    }               reduce using rule 48 (expression -> INT_VALUE .)
    IDENTIFIER      reduce using rule 48 (expression -> INT_VALUE .)
    INT             reduce using rule 48 (expression -> INT_VALUE .)
    FLOAT           reduce using rule 48 (expression -> INT_VALUE .)
    STR             reduce using rule 48 (expression -> INT_VALUE .)
    ADAPT           reduce using rule 48 (expression -> INT_VALUE .)
    PRINT           reduce using rule 48 (expression -> INT_VALUE .)
    RETURN          reduce using rule 48 (expression -> INT_VALUE .)
    LPAREN          reduce using rule 48 (expression -> INT_VALUE .)
    DECREMENT       reduce using rule 48 (expression -> INT_VALUE .)
    IF              reduce using rule 48 (expression -> INT_VALUE .)
    FN              reduce using rule 48 (expression -> INT_VALUE .)
    INT_VALUE       reduce using rule 48 (expression -> INT_VALUE .)
    FLOAT_VALUE     reduce using rule 48 (expression -> INT_VALUE .)
    STRING_VALUE    reduce using rule 48 (expression -> INT_VALUE .)
    FOR             reduce using rule 48 (expression -> INT_VALUE .)
    RPAREN          reduce using rule 48 (expression -> INT_VALUE .)
    ;               reduce using rule 48 (expression -> INT_VALUE .)
    ,               reduce using rule 48 (expression -> INT_VALUE .)


state 24

    (49) expression -> FLOAT_VALUE .

    ADD             reduce using rule 49 (expression -> FLOAT_VALUE .)
    SUB             reduce using rule 49 (expression -> FLOAT_VALUE .)
    DIV             reduce using rule 49 (expression -> FLOAT_VALUE .)
    MUL             reduce using rule 49 (expression -> FLOAT_VALUE .)
    LE              reduce using rule 49 (expression -> FLOAT_VALUE .)
    GE              reduce using rule 49 (expression -> FLOAT_VALUE .)
    EQ              reduce using rule 49 (expression -> FLOAT_VALUE .)
    NE              reduce using rule 49 (expression -> FLOAT_VALUE .)
    GT              reduce using rule 49 (expression -> FLOAT_VALUE .)
    LT              reduce using rule 49 (expression -> FLOAT_VALUE .)
    AND             reduce using rule 49 (expression -> FLOAT_VALUE .)
    OR              reduce using rule 49 (expression -> FLOAT_VALUE .)
    INCREMENT       reduce using rule 49 (expression -> FLOAT_VALUE .)
    WHILE           reduce using rule 49 (expression -> FLOAT_VALUE .)
    }               reduce using rule 49 (expression -> FLOAT_VALUE .)
    IDENTIFIER      reduce using rule 49 (expression -> FLOAT_VALUE .)
    INT             reduce using rule 49 (expression -> FLOAT_VALUE .)
    FLOAT           reduce using rule 49 (expression -> FLOAT_VALUE .)
    STR             reduce using rule 49 (expression -> FLOAT_VALUE .)
    ADAPT           reduce using rule 49 (expression -> FLOAT_VALUE .)
    PRINT           reduce using rule 49 (expression -> FLOAT_VALUE .)
    RETURN          reduce using rule 49 (expression -> FLOAT_VALUE .)
    LPAREN          reduce using rule 49 (expression -> FLOAT_VALUE .)
    DECREMENT       reduce using rule 49 (expression -> FLOAT_VALUE .)
    IF              reduce using rule 49 (expression -> FLOAT_VALUE .)
    FN              reduce using rule 49 (expression -> FLOAT_VALUE .)
    INT_VALUE       reduce using rule 49 (expression -> FLOAT_VALUE .)
    FLOAT_VALUE     reduce using rule 49 (expression -> FLOAT_VALUE .)
    STRING_VALUE    reduce using rule 49 (expression -> FLOAT_VALUE .)
    FOR             reduce using rule 49 (expression -> FLOAT_VALUE .)
    RPAREN          reduce using rule 49 (expression -> FLOAT_VALUE .)
    ;               reduce using rule 49 (expression -> FLOAT_VALUE .)
    ,               reduce using rule 49 (expression -> FLOAT_VALUE .)


state 25

    (52) expression -> FOR . LPAREN statement ; expression ; expression RPAREN { statements }

    LPAREN          shift and go to state 61


state 26

    (19) expression -> LPAREN expression . RPAREN
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

    RPAREN          shift and go to state 62
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50
    WHILE           reduce using rule 10 (statement -> expression .)


state 27

    (33) expression -> IDENTIFIER . LPAREN expressions RPAREN
    (51) expression -> IDENTIFIER .
    (4) statement -> IDENTIFIER . EQUAL expression
    (5) statement -> IDENTIFIER . EQUAL ACCEPT LPAREN RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 37
    RPAREN          reduce using rule 51 (expression -> IDENTIFIER .)
    ADD             reduce using rule 51 (expression -> IDENTIFIER .)
    SUB             reduce using rule 51 (expression -> IDENTIFIER .)
    DIV             reduce using rule 51 (expression -> IDENTIFIER .)
    MUL             reduce using rule 51 (expression -> IDENTIFIER .)
    LE              reduce using rule 51 (expression -> IDENTIFIER .)
    GE              reduce using rule 51 (expression -> IDENTIFIER .)
    EQ              reduce using rule 51 (expression -> IDENTIFIER .)
    NE              reduce using rule 51 (expression -> IDENTIFIER .)
    GT              reduce using rule 51 (expression -> IDENTIFIER .)
    LT              reduce using rule 51 (expression -> IDENTIFIER .)
    AND             reduce using rule 51 (expression -> IDENTIFIER .)
    OR              reduce using rule 51 (expression -> IDENTIFIER .)
    INCREMENT       reduce using rule 51 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 51 (expression -> IDENTIFIER .)
    }               reduce using rule 51 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 51 (expression -> IDENTIFIER .)
    INT             reduce using rule 51 (expression -> IDENTIFIER .)
    FLOAT           reduce using rule 51 (expression -> IDENTIFIER .)
    STR             reduce using rule 51 (expression -> IDENTIFIER .)
    ADAPT           reduce using rule 51 (expression -> IDENTIFIER .)
    PRINT           reduce using rule 51 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 51 (expression -> IDENTIFIER .)
    DECREMENT       reduce using rule 51 (expression -> IDENTIFIER .)
    IF              reduce using rule 51 (expression -> IDENTIFIER .)
    FN              reduce using rule 51 (expression -> IDENTIFIER .)
    INT_VALUE       reduce using rule 51 (expression -> IDENTIFIER .)
    FLOAT_VALUE     reduce using rule 51 (expression -> IDENTIFIER .)
    STRING_VALUE    reduce using rule 51 (expression -> IDENTIFIER .)
    FOR             reduce using rule 51 (expression -> IDENTIFIER .)
    ;               reduce using rule 51 (expression -> IDENTIFIER .)
    ,               reduce using rule 51 (expression -> IDENTIFIER .)
    EQUAL           shift and go to state 36

  ! LPAREN          [ reduce using rule 51 (expression -> IDENTIFIER .) ]


state 28

    (36) expression -> INT . IDENTIFIER
    (6) statement -> INT . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 63


state 29

    (37) expression -> FLOAT . IDENTIFIER
    (7) statement -> FLOAT . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 64


state 30

    (38) expression -> STR . IDENTIFIER
    (8) statement -> STR . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 65


state 31

    (39) expression -> ADAPT . IDENTIFIER
    (9) statement -> ADAPT . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 66


state 32

    (53) expression -> statement . WHILE LPAREN expression RPAREN { statements }

    WHILE           shift and go to state 35


state 33

    (1) program -> FUNC INIT LPAREN RPAREN { statements } .

    $end            reduce using rule 1 (program -> FUNC INIT LPAREN RPAREN { statements } .)


state 34

    (2) statements -> statements statement .
    (53) expression -> statement . WHILE LPAREN expression RPAREN { statements }

    }               reduce using rule 2 (statements -> statements statement .)
    IDENTIFIER      reduce using rule 2 (statements -> statements statement .)
    INT             reduce using rule 2 (statements -> statements statement .)
    FLOAT           reduce using rule 2 (statements -> statements statement .)
    STR             reduce using rule 2 (statements -> statements statement .)
    ADAPT           reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    SUB             reduce using rule 2 (statements -> statements statement .)
    LPAREN          reduce using rule 2 (statements -> statements statement .)
    DECREMENT       reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    FN              reduce using rule 2 (statements -> statements statement .)
    INT_VALUE       reduce using rule 2 (statements -> statements statement .)
    FLOAT_VALUE     reduce using rule 2 (statements -> statements statement .)
    STRING_VALUE    reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    WHILE           shift and go to state 35


state 35

    (53) expression -> statement WHILE . LPAREN expression RPAREN { statements }

    LPAREN          shift and go to state 67


state 36

    (4) statement -> IDENTIFIER EQUAL . expression
    (5) statement -> IDENTIFIER EQUAL . ACCEPT LPAREN RPAREN
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    ACCEPT          shift and go to state 69
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 68
    statement                      shift and go to state 32

state 37

    (33) expression -> IDENTIFIER LPAREN . expressions RPAREN
    (30) expressions -> . expressions , expression
    (31) expressions -> . expression
    (32) expressions -> .
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    RPAREN          reduce using rule 32 (expressions -> .)
    ,               reduce using rule 32 (expressions -> .)
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expressions                    shift and go to state 70
    expression                     shift and go to state 71
    statement                      shift and go to state 32

state 38

    (14) expression -> expression ADD . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 72
    statement                      shift and go to state 32

state 39

    (15) expression -> expression SUB . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 73
    statement                      shift and go to state 32

state 40

    (16) expression -> expression DIV . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 74
    statement                      shift and go to state 32

state 41

    (17) expression -> expression MUL . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 75
    statement                      shift and go to state 32

state 42

    (20) expression -> expression LE . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 76
    statement                      shift and go to state 32

state 43

    (21) expression -> expression GE . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 77
    statement                      shift and go to state 32

state 44

    (22) expression -> expression EQ . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 78
    statement                      shift and go to state 32

state 45

    (23) expression -> expression NE . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 79
    statement                      shift and go to state 32

state 46

    (24) expression -> expression GT . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 80
    statement                      shift and go to state 32

state 47

    (25) expression -> expression LT . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 81
    statement                      shift and go to state 32

state 48

    (26) expression -> expression AND . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 82
    statement                      shift and go to state 32

state 49

    (27) expression -> expression OR . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 83
    statement                      shift and go to state 32

state 50

    (28) expression -> expression INCREMENT .

    ADD             reduce using rule 28 (expression -> expression INCREMENT .)
    SUB             reduce using rule 28 (expression -> expression INCREMENT .)
    DIV             reduce using rule 28 (expression -> expression INCREMENT .)
    MUL             reduce using rule 28 (expression -> expression INCREMENT .)
    LE              reduce using rule 28 (expression -> expression INCREMENT .)
    GE              reduce using rule 28 (expression -> expression INCREMENT .)
    EQ              reduce using rule 28 (expression -> expression INCREMENT .)
    NE              reduce using rule 28 (expression -> expression INCREMENT .)
    GT              reduce using rule 28 (expression -> expression INCREMENT .)
    LT              reduce using rule 28 (expression -> expression INCREMENT .)
    AND             reduce using rule 28 (expression -> expression INCREMENT .)
    OR              reduce using rule 28 (expression -> expression INCREMENT .)
    INCREMENT       reduce using rule 28 (expression -> expression INCREMENT .)
    WHILE           reduce using rule 28 (expression -> expression INCREMENT .)
    }               reduce using rule 28 (expression -> expression INCREMENT .)
    IDENTIFIER      reduce using rule 28 (expression -> expression INCREMENT .)
    INT             reduce using rule 28 (expression -> expression INCREMENT .)
    FLOAT           reduce using rule 28 (expression -> expression INCREMENT .)
    STR             reduce using rule 28 (expression -> expression INCREMENT .)
    ADAPT           reduce using rule 28 (expression -> expression INCREMENT .)
    PRINT           reduce using rule 28 (expression -> expression INCREMENT .)
    RETURN          reduce using rule 28 (expression -> expression INCREMENT .)
    LPAREN          reduce using rule 28 (expression -> expression INCREMENT .)
    DECREMENT       reduce using rule 28 (expression -> expression INCREMENT .)
    IF              reduce using rule 28 (expression -> expression INCREMENT .)
    FN              reduce using rule 28 (expression -> expression INCREMENT .)
    INT_VALUE       reduce using rule 28 (expression -> expression INCREMENT .)
    FLOAT_VALUE     reduce using rule 28 (expression -> expression INCREMENT .)
    STRING_VALUE    reduce using rule 28 (expression -> expression INCREMENT .)
    FOR             reduce using rule 28 (expression -> expression INCREMENT .)
    RPAREN          reduce using rule 28 (expression -> expression INCREMENT .)
    ;               reduce using rule 28 (expression -> expression INCREMENT .)
    ,               reduce using rule 28 (expression -> expression INCREMENT .)


state 51

    (6) statement -> INT IDENTIFIER . EQUAL expression
    (36) expression -> INT IDENTIFIER .

    EQUAL           shift and go to state 84
    ADD             reduce using rule 36 (expression -> INT IDENTIFIER .)
    SUB             reduce using rule 36 (expression -> INT IDENTIFIER .)
    DIV             reduce using rule 36 (expression -> INT IDENTIFIER .)
    MUL             reduce using rule 36 (expression -> INT IDENTIFIER .)
    LE              reduce using rule 36 (expression -> INT IDENTIFIER .)
    GE              reduce using rule 36 (expression -> INT IDENTIFIER .)
    EQ              reduce using rule 36 (expression -> INT IDENTIFIER .)
    NE              reduce using rule 36 (expression -> INT IDENTIFIER .)
    GT              reduce using rule 36 (expression -> INT IDENTIFIER .)
    LT              reduce using rule 36 (expression -> INT IDENTIFIER .)
    AND             reduce using rule 36 (expression -> INT IDENTIFIER .)
    OR              reduce using rule 36 (expression -> INT IDENTIFIER .)
    INCREMENT       reduce using rule 36 (expression -> INT IDENTIFIER .)
    WHILE           reduce using rule 36 (expression -> INT IDENTIFIER .)
    }               reduce using rule 36 (expression -> INT IDENTIFIER .)
    IDENTIFIER      reduce using rule 36 (expression -> INT IDENTIFIER .)
    INT             reduce using rule 36 (expression -> INT IDENTIFIER .)
    FLOAT           reduce using rule 36 (expression -> INT IDENTIFIER .)
    STR             reduce using rule 36 (expression -> INT IDENTIFIER .)
    ADAPT           reduce using rule 36 (expression -> INT IDENTIFIER .)
    PRINT           reduce using rule 36 (expression -> INT IDENTIFIER .)
    RETURN          reduce using rule 36 (expression -> INT IDENTIFIER .)
    LPAREN          reduce using rule 36 (expression -> INT IDENTIFIER .)
    DECREMENT       reduce using rule 36 (expression -> INT IDENTIFIER .)
    IF              reduce using rule 36 (expression -> INT IDENTIFIER .)
    FN              reduce using rule 36 (expression -> INT IDENTIFIER .)
    INT_VALUE       reduce using rule 36 (expression -> INT IDENTIFIER .)
    FLOAT_VALUE     reduce using rule 36 (expression -> INT IDENTIFIER .)
    STRING_VALUE    reduce using rule 36 (expression -> INT IDENTIFIER .)
    FOR             reduce using rule 36 (expression -> INT IDENTIFIER .)
    ;               reduce using rule 36 (expression -> INT IDENTIFIER .)


state 52

    (7) statement -> FLOAT IDENTIFIER . EQUAL expression
    (37) expression -> FLOAT IDENTIFIER .

    EQUAL           shift and go to state 85
    ADD             reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    SUB             reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    DIV             reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    MUL             reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    LE              reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    GE              reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    EQ              reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    NE              reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    GT              reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    LT              reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    AND             reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    OR              reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    INCREMENT       reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    WHILE           reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    }               reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    IDENTIFIER      reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    INT             reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    FLOAT           reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    STR             reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    ADAPT           reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    PRINT           reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    RETURN          reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    LPAREN          reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    DECREMENT       reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    IF              reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    FN              reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    INT_VALUE       reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    FLOAT_VALUE     reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    STRING_VALUE    reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    FOR             reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    ;               reduce using rule 37 (expression -> FLOAT IDENTIFIER .)


state 53

    (8) statement -> STR IDENTIFIER . EQUAL expression
    (38) expression -> STR IDENTIFIER .

    EQUAL           shift and go to state 86
    ADD             reduce using rule 38 (expression -> STR IDENTIFIER .)
    SUB             reduce using rule 38 (expression -> STR IDENTIFIER .)
    DIV             reduce using rule 38 (expression -> STR IDENTIFIER .)
    MUL             reduce using rule 38 (expression -> STR IDENTIFIER .)
    LE              reduce using rule 38 (expression -> STR IDENTIFIER .)
    GE              reduce using rule 38 (expression -> STR IDENTIFIER .)
    EQ              reduce using rule 38 (expression -> STR IDENTIFIER .)
    NE              reduce using rule 38 (expression -> STR IDENTIFIER .)
    GT              reduce using rule 38 (expression -> STR IDENTIFIER .)
    LT              reduce using rule 38 (expression -> STR IDENTIFIER .)
    AND             reduce using rule 38 (expression -> STR IDENTIFIER .)
    OR              reduce using rule 38 (expression -> STR IDENTIFIER .)
    INCREMENT       reduce using rule 38 (expression -> STR IDENTIFIER .)
    WHILE           reduce using rule 38 (expression -> STR IDENTIFIER .)
    }               reduce using rule 38 (expression -> STR IDENTIFIER .)
    IDENTIFIER      reduce using rule 38 (expression -> STR IDENTIFIER .)
    INT             reduce using rule 38 (expression -> STR IDENTIFIER .)
    FLOAT           reduce using rule 38 (expression -> STR IDENTIFIER .)
    STR             reduce using rule 38 (expression -> STR IDENTIFIER .)
    ADAPT           reduce using rule 38 (expression -> STR IDENTIFIER .)
    PRINT           reduce using rule 38 (expression -> STR IDENTIFIER .)
    RETURN          reduce using rule 38 (expression -> STR IDENTIFIER .)
    LPAREN          reduce using rule 38 (expression -> STR IDENTIFIER .)
    DECREMENT       reduce using rule 38 (expression -> STR IDENTIFIER .)
    IF              reduce using rule 38 (expression -> STR IDENTIFIER .)
    FN              reduce using rule 38 (expression -> STR IDENTIFIER .)
    INT_VALUE       reduce using rule 38 (expression -> STR IDENTIFIER .)
    FLOAT_VALUE     reduce using rule 38 (expression -> STR IDENTIFIER .)
    STRING_VALUE    reduce using rule 38 (expression -> STR IDENTIFIER .)
    FOR             reduce using rule 38 (expression -> STR IDENTIFIER .)
    ;               reduce using rule 38 (expression -> STR IDENTIFIER .)


state 54

    (9) statement -> ADAPT IDENTIFIER . EQUAL expression
    (39) expression -> ADAPT IDENTIFIER .

    EQUAL           shift and go to state 87
    ADD             reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    SUB             reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    DIV             reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    MUL             reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    LE              reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    GE              reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    EQ              reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    NE              reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    GT              reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    LT              reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    AND             reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    OR              reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    INCREMENT       reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    WHILE           reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    }               reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    IDENTIFIER      reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    INT             reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    FLOAT           reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    STR             reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    ADAPT           reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    PRINT           reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    RETURN          reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    LPAREN          reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    DECREMENT       reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    IF              reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    FN              reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    INT_VALUE       reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    FLOAT_VALUE     reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    STRING_VALUE    reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    FOR             reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    ;               reduce using rule 39 (expression -> ADAPT IDENTIFIER .)


state 55

    (11) statement -> PRINT LPAREN . expression RPAREN
    (12) statement -> PRINT LPAREN . STRING_VALUE RPAREN
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    STRING_VALUE    shift and go to state 89
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 88
    statement                      shift and go to state 32

state 56

    (13) statement -> RETURN expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

  ! shift/reduce conflict for SUB resolved as shift
  ! reduce/reduce conflict for WHILE resolved using rule 10 (statement -> expression .)
    }               reduce using rule 13 (statement -> RETURN expression .)
    IDENTIFIER      reduce using rule 13 (statement -> RETURN expression .)
    INT             reduce using rule 13 (statement -> RETURN expression .)
    FLOAT           reduce using rule 13 (statement -> RETURN expression .)
    STR             reduce using rule 13 (statement -> RETURN expression .)
    ADAPT           reduce using rule 13 (statement -> RETURN expression .)
    PRINT           reduce using rule 13 (statement -> RETURN expression .)
    RETURN          reduce using rule 13 (statement -> RETURN expression .)
    LPAREN          reduce using rule 13 (statement -> RETURN expression .)
    DECREMENT       reduce using rule 13 (statement -> RETURN expression .)
    IF              reduce using rule 13 (statement -> RETURN expression .)
    FN              reduce using rule 13 (statement -> RETURN expression .)
    INT_VALUE       reduce using rule 13 (statement -> RETURN expression .)
    FLOAT_VALUE     reduce using rule 13 (statement -> RETURN expression .)
    STRING_VALUE    reduce using rule 13 (statement -> RETURN expression .)
    FOR             reduce using rule 13 (statement -> RETURN expression .)
    ;               reduce using rule 13 (statement -> RETURN expression .)
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50
    WHILE           reduce using rule 10 (statement -> expression .)

  ! WHILE           [ reduce using rule 13 (statement -> RETURN expression .) ]
  ! SUB             [ reduce using rule 13 (statement -> RETURN expression .) ]


state 57

    (18) expression -> SUB expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

  ! reduce/reduce conflict for WHILE resolved using rule 10 (statement -> expression .)
    ADD             reduce using rule 18 (expression -> SUB expression .)
    SUB             reduce using rule 18 (expression -> SUB expression .)
    DIV             reduce using rule 18 (expression -> SUB expression .)
    MUL             reduce using rule 18 (expression -> SUB expression .)
    LE              reduce using rule 18 (expression -> SUB expression .)
    GE              reduce using rule 18 (expression -> SUB expression .)
    EQ              reduce using rule 18 (expression -> SUB expression .)
    NE              reduce using rule 18 (expression -> SUB expression .)
    GT              reduce using rule 18 (expression -> SUB expression .)
    LT              reduce using rule 18 (expression -> SUB expression .)
    AND             reduce using rule 18 (expression -> SUB expression .)
    OR              reduce using rule 18 (expression -> SUB expression .)
    INCREMENT       reduce using rule 18 (expression -> SUB expression .)
    }               reduce using rule 18 (expression -> SUB expression .)
    IDENTIFIER      reduce using rule 18 (expression -> SUB expression .)
    INT             reduce using rule 18 (expression -> SUB expression .)
    FLOAT           reduce using rule 18 (expression -> SUB expression .)
    STR             reduce using rule 18 (expression -> SUB expression .)
    ADAPT           reduce using rule 18 (expression -> SUB expression .)
    PRINT           reduce using rule 18 (expression -> SUB expression .)
    RETURN          reduce using rule 18 (expression -> SUB expression .)
    LPAREN          reduce using rule 18 (expression -> SUB expression .)
    DECREMENT       reduce using rule 18 (expression -> SUB expression .)
    IF              reduce using rule 18 (expression -> SUB expression .)
    FN              reduce using rule 18 (expression -> SUB expression .)
    INT_VALUE       reduce using rule 18 (expression -> SUB expression .)
    FLOAT_VALUE     reduce using rule 18 (expression -> SUB expression .)
    STRING_VALUE    reduce using rule 18 (expression -> SUB expression .)
    FOR             reduce using rule 18 (expression -> SUB expression .)
    RPAREN          reduce using rule 18 (expression -> SUB expression .)
    ;               reduce using rule 18 (expression -> SUB expression .)
    ,               reduce using rule 18 (expression -> SUB expression .)
    WHILE           reduce using rule 10 (statement -> expression .)

  ! WHILE           [ reduce using rule 18 (expression -> SUB expression .) ]
  ! ADD             [ shift and go to state 38 ]
  ! SUB             [ shift and go to state 39 ]
  ! DIV             [ shift and go to state 40 ]
  ! MUL             [ shift and go to state 41 ]
  ! LE              [ shift and go to state 42 ]
  ! GE              [ shift and go to state 43 ]
  ! EQ              [ shift and go to state 44 ]
  ! NE              [ shift and go to state 45 ]
  ! GT              [ shift and go to state 46 ]
  ! LT              [ shift and go to state 47 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 49 ]
  ! INCREMENT       [ shift and go to state 50 ]


state 58

    (29) expression -> DECREMENT expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! reduce/reduce conflict for WHILE resolved using rule 10 (statement -> expression .)
    }               reduce using rule 29 (expression -> DECREMENT expression .)
    IDENTIFIER      reduce using rule 29 (expression -> DECREMENT expression .)
    INT             reduce using rule 29 (expression -> DECREMENT expression .)
    FLOAT           reduce using rule 29 (expression -> DECREMENT expression .)
    STR             reduce using rule 29 (expression -> DECREMENT expression .)
    ADAPT           reduce using rule 29 (expression -> DECREMENT expression .)
    PRINT           reduce using rule 29 (expression -> DECREMENT expression .)
    RETURN          reduce using rule 29 (expression -> DECREMENT expression .)
    LPAREN          reduce using rule 29 (expression -> DECREMENT expression .)
    DECREMENT       reduce using rule 29 (expression -> DECREMENT expression .)
    IF              reduce using rule 29 (expression -> DECREMENT expression .)
    FN              reduce using rule 29 (expression -> DECREMENT expression .)
    INT_VALUE       reduce using rule 29 (expression -> DECREMENT expression .)
    FLOAT_VALUE     reduce using rule 29 (expression -> DECREMENT expression .)
    STRING_VALUE    reduce using rule 29 (expression -> DECREMENT expression .)
    FOR             reduce using rule 29 (expression -> DECREMENT expression .)
    RPAREN          reduce using rule 29 (expression -> DECREMENT expression .)
    ;               reduce using rule 29 (expression -> DECREMENT expression .)
    ,               reduce using rule 29 (expression -> DECREMENT expression .)
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50
    WHILE           reduce using rule 10 (statement -> expression .)

  ! ADD             [ reduce using rule 29 (expression -> DECREMENT expression .) ]
  ! SUB             [ reduce using rule 29 (expression -> DECREMENT expression .) ]
  ! DIV             [ reduce using rule 29 (expression -> DECREMENT expression .) ]
  ! MUL             [ reduce using rule 29 (expression -> DECREMENT expression .) ]
  ! LE              [ reduce using rule 29 (expression -> DECREMENT expression .) ]
  ! GE              [ reduce using rule 29 (expression -> DECREMENT expression .) ]
  ! EQ              [ reduce using rule 29 (expression -> DECREMENT expression .) ]
  ! NE              [ reduce using rule 29 (expression -> DECREMENT expression .) ]
  ! GT              [ reduce using rule 29 (expression -> DECREMENT expression .) ]
  ! LT              [ reduce using rule 29 (expression -> DECREMENT expression .) ]
  ! AND             [ reduce using rule 29 (expression -> DECREMENT expression .) ]
  ! OR              [ reduce using rule 29 (expression -> DECREMENT expression .) ]
  ! INCREMENT       [ reduce using rule 29 (expression -> DECREMENT expression .) ]
  ! WHILE           [ reduce using rule 29 (expression -> DECREMENT expression .) ]


state 59

    (34) expression -> IF LPAREN . expression RPAREN { statements } ELSE { statements }
    (35) expression -> IF LPAREN . expression RPAREN { statements }
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 90
    statement                      shift and go to state 32

state 60

    (40) expression -> FN IDENTIFIER . LPAREN RPAREN : INT { statements }
    (41) expression -> FN IDENTIFIER . LPAREN RPAREN : FLOAT { statements }
    (42) expression -> FN IDENTIFIER . LPAREN RPAREN : STR { statements }
    (43) expression -> FN IDENTIFIER . LPAREN RPAREN : VOID { statements }
    (44) expression -> FN IDENTIFIER . LPAREN expressions RPAREN : INT { statements }
    (45) expression -> FN IDENTIFIER . LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> FN IDENTIFIER . LPAREN expressions RPAREN : STR { statements }
    (47) expression -> FN IDENTIFIER . LPAREN expressions RPAREN : VOID { statements }

    LPAREN          shift and go to state 91


state 61

    (52) expression -> FOR LPAREN . statement ; expression ; expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statement                      shift and go to state 92
    expression                     shift and go to state 11

state 62

    (19) expression -> LPAREN expression RPAREN .

    ADD             reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    SUB             reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    MUL             reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    }               reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    INT             reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    STR             reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    ADAPT           reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    FN              reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    INT_VALUE       reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    FLOAT_VALUE     reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    STRING_VALUE    reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    ;               reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    ,               reduce using rule 19 (expression -> LPAREN expression RPAREN .)


state 63

    (36) expression -> INT IDENTIFIER .
    (6) statement -> INT IDENTIFIER . EQUAL expression

    RPAREN          reduce using rule 36 (expression -> INT IDENTIFIER .)
    ADD             reduce using rule 36 (expression -> INT IDENTIFIER .)
    SUB             reduce using rule 36 (expression -> INT IDENTIFIER .)
    DIV             reduce using rule 36 (expression -> INT IDENTIFIER .)
    MUL             reduce using rule 36 (expression -> INT IDENTIFIER .)
    LE              reduce using rule 36 (expression -> INT IDENTIFIER .)
    GE              reduce using rule 36 (expression -> INT IDENTIFIER .)
    EQ              reduce using rule 36 (expression -> INT IDENTIFIER .)
    NE              reduce using rule 36 (expression -> INT IDENTIFIER .)
    GT              reduce using rule 36 (expression -> INT IDENTIFIER .)
    LT              reduce using rule 36 (expression -> INT IDENTIFIER .)
    AND             reduce using rule 36 (expression -> INT IDENTIFIER .)
    OR              reduce using rule 36 (expression -> INT IDENTIFIER .)
    INCREMENT       reduce using rule 36 (expression -> INT IDENTIFIER .)
    WHILE           reduce using rule 36 (expression -> INT IDENTIFIER .)
    }               reduce using rule 36 (expression -> INT IDENTIFIER .)
    IDENTIFIER      reduce using rule 36 (expression -> INT IDENTIFIER .)
    INT             reduce using rule 36 (expression -> INT IDENTIFIER .)
    FLOAT           reduce using rule 36 (expression -> INT IDENTIFIER .)
    STR             reduce using rule 36 (expression -> INT IDENTIFIER .)
    ADAPT           reduce using rule 36 (expression -> INT IDENTIFIER .)
    PRINT           reduce using rule 36 (expression -> INT IDENTIFIER .)
    RETURN          reduce using rule 36 (expression -> INT IDENTIFIER .)
    LPAREN          reduce using rule 36 (expression -> INT IDENTIFIER .)
    DECREMENT       reduce using rule 36 (expression -> INT IDENTIFIER .)
    IF              reduce using rule 36 (expression -> INT IDENTIFIER .)
    FN              reduce using rule 36 (expression -> INT IDENTIFIER .)
    INT_VALUE       reduce using rule 36 (expression -> INT IDENTIFIER .)
    FLOAT_VALUE     reduce using rule 36 (expression -> INT IDENTIFIER .)
    STRING_VALUE    reduce using rule 36 (expression -> INT IDENTIFIER .)
    FOR             reduce using rule 36 (expression -> INT IDENTIFIER .)
    ;               reduce using rule 36 (expression -> INT IDENTIFIER .)
    ,               reduce using rule 36 (expression -> INT IDENTIFIER .)
    EQUAL           shift and go to state 84


state 64

    (37) expression -> FLOAT IDENTIFIER .
    (7) statement -> FLOAT IDENTIFIER . EQUAL expression

    RPAREN          reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    ADD             reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    SUB             reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    DIV             reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    MUL             reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    LE              reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    GE              reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    EQ              reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    NE              reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    GT              reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    LT              reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    AND             reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    OR              reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    INCREMENT       reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    WHILE           reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    }               reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    IDENTIFIER      reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    INT             reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    FLOAT           reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    STR             reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    ADAPT           reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    PRINT           reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    RETURN          reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    LPAREN          reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    DECREMENT       reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    IF              reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    FN              reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    INT_VALUE       reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    FLOAT_VALUE     reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    STRING_VALUE    reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    FOR             reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    ;               reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    ,               reduce using rule 37 (expression -> FLOAT IDENTIFIER .)
    EQUAL           shift and go to state 85


state 65

    (38) expression -> STR IDENTIFIER .
    (8) statement -> STR IDENTIFIER . EQUAL expression

    RPAREN          reduce using rule 38 (expression -> STR IDENTIFIER .)
    ADD             reduce using rule 38 (expression -> STR IDENTIFIER .)
    SUB             reduce using rule 38 (expression -> STR IDENTIFIER .)
    DIV             reduce using rule 38 (expression -> STR IDENTIFIER .)
    MUL             reduce using rule 38 (expression -> STR IDENTIFIER .)
    LE              reduce using rule 38 (expression -> STR IDENTIFIER .)
    GE              reduce using rule 38 (expression -> STR IDENTIFIER .)
    EQ              reduce using rule 38 (expression -> STR IDENTIFIER .)
    NE              reduce using rule 38 (expression -> STR IDENTIFIER .)
    GT              reduce using rule 38 (expression -> STR IDENTIFIER .)
    LT              reduce using rule 38 (expression -> STR IDENTIFIER .)
    AND             reduce using rule 38 (expression -> STR IDENTIFIER .)
    OR              reduce using rule 38 (expression -> STR IDENTIFIER .)
    INCREMENT       reduce using rule 38 (expression -> STR IDENTIFIER .)
    WHILE           reduce using rule 38 (expression -> STR IDENTIFIER .)
    }               reduce using rule 38 (expression -> STR IDENTIFIER .)
    IDENTIFIER      reduce using rule 38 (expression -> STR IDENTIFIER .)
    INT             reduce using rule 38 (expression -> STR IDENTIFIER .)
    FLOAT           reduce using rule 38 (expression -> STR IDENTIFIER .)
    STR             reduce using rule 38 (expression -> STR IDENTIFIER .)
    ADAPT           reduce using rule 38 (expression -> STR IDENTIFIER .)
    PRINT           reduce using rule 38 (expression -> STR IDENTIFIER .)
    RETURN          reduce using rule 38 (expression -> STR IDENTIFIER .)
    LPAREN          reduce using rule 38 (expression -> STR IDENTIFIER .)
    DECREMENT       reduce using rule 38 (expression -> STR IDENTIFIER .)
    IF              reduce using rule 38 (expression -> STR IDENTIFIER .)
    FN              reduce using rule 38 (expression -> STR IDENTIFIER .)
    INT_VALUE       reduce using rule 38 (expression -> STR IDENTIFIER .)
    FLOAT_VALUE     reduce using rule 38 (expression -> STR IDENTIFIER .)
    STRING_VALUE    reduce using rule 38 (expression -> STR IDENTIFIER .)
    FOR             reduce using rule 38 (expression -> STR IDENTIFIER .)
    ;               reduce using rule 38 (expression -> STR IDENTIFIER .)
    ,               reduce using rule 38 (expression -> STR IDENTIFIER .)
    EQUAL           shift and go to state 86


state 66

    (39) expression -> ADAPT IDENTIFIER .
    (9) statement -> ADAPT IDENTIFIER . EQUAL expression

    RPAREN          reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    ADD             reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    SUB             reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    DIV             reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    MUL             reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    LE              reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    GE              reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    EQ              reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    NE              reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    GT              reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    LT              reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    AND             reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    OR              reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    INCREMENT       reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    WHILE           reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    }               reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    IDENTIFIER      reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    INT             reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    FLOAT           reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    STR             reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    ADAPT           reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    PRINT           reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    RETURN          reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    LPAREN          reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    DECREMENT       reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    IF              reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    FN              reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    INT_VALUE       reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    FLOAT_VALUE     reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    STRING_VALUE    reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    FOR             reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    ;               reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    ,               reduce using rule 39 (expression -> ADAPT IDENTIFIER .)
    EQUAL           shift and go to state 87


state 67

    (53) expression -> statement WHILE LPAREN . expression RPAREN { statements }
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    statement                      shift and go to state 32
    expression                     shift and go to state 93

state 68

    (4) statement -> IDENTIFIER EQUAL expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

  ! shift/reduce conflict for SUB resolved as shift
  ! reduce/reduce conflict for WHILE resolved using rule 4 (statement -> IDENTIFIER EQUAL expression .)
    WHILE           reduce using rule 4 (statement -> IDENTIFIER EQUAL expression .)
    }               reduce using rule 4 (statement -> IDENTIFIER EQUAL expression .)
    IDENTIFIER      reduce using rule 4 (statement -> IDENTIFIER EQUAL expression .)
    INT             reduce using rule 4 (statement -> IDENTIFIER EQUAL expression .)
    FLOAT           reduce using rule 4 (statement -> IDENTIFIER EQUAL expression .)
    STR             reduce using rule 4 (statement -> IDENTIFIER EQUAL expression .)
    ADAPT           reduce using rule 4 (statement -> IDENTIFIER EQUAL expression .)
    PRINT           reduce using rule 4 (statement -> IDENTIFIER EQUAL expression .)
    RETURN          reduce using rule 4 (statement -> IDENTIFIER EQUAL expression .)
    LPAREN          reduce using rule 4 (statement -> IDENTIFIER EQUAL expression .)
    DECREMENT       reduce using rule 4 (statement -> IDENTIFIER EQUAL expression .)
    IF              reduce using rule 4 (statement -> IDENTIFIER EQUAL expression .)
    FN              reduce using rule 4 (statement -> IDENTIFIER EQUAL expression .)
    INT_VALUE       reduce using rule 4 (statement -> IDENTIFIER EQUAL expression .)
    FLOAT_VALUE     reduce using rule 4 (statement -> IDENTIFIER EQUAL expression .)
    STRING_VALUE    reduce using rule 4 (statement -> IDENTIFIER EQUAL expression .)
    FOR             reduce using rule 4 (statement -> IDENTIFIER EQUAL expression .)
    ;               reduce using rule 4 (statement -> IDENTIFIER EQUAL expression .)
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50

  ! SUB             [ reduce using rule 4 (statement -> IDENTIFIER EQUAL expression .) ]
  ! WHILE           [ reduce using rule 10 (statement -> expression .) ]


state 69

    (5) statement -> IDENTIFIER EQUAL ACCEPT . LPAREN RPAREN

    LPAREN          shift and go to state 94


state 70

    (33) expression -> IDENTIFIER LPAREN expressions . RPAREN
    (30) expressions -> expressions . , expression

    RPAREN          shift and go to state 95
    ,               shift and go to state 96


state 71

    (31) expressions -> expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

    RPAREN          reduce using rule 31 (expressions -> expression .)
    ,               reduce using rule 31 (expressions -> expression .)
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50
    WHILE           reduce using rule 10 (statement -> expression .)


state 72

    (14) expression -> expression ADD expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

  ! reduce/reduce conflict for WHILE resolved using rule 10 (statement -> expression .)
    ADD             reduce using rule 14 (expression -> expression ADD expression .)
    SUB             reduce using rule 14 (expression -> expression ADD expression .)
    LE              reduce using rule 14 (expression -> expression ADD expression .)
    GE              reduce using rule 14 (expression -> expression ADD expression .)
    EQ              reduce using rule 14 (expression -> expression ADD expression .)
    NE              reduce using rule 14 (expression -> expression ADD expression .)
    GT              reduce using rule 14 (expression -> expression ADD expression .)
    LT              reduce using rule 14 (expression -> expression ADD expression .)
    AND             reduce using rule 14 (expression -> expression ADD expression .)
    OR              reduce using rule 14 (expression -> expression ADD expression .)
    INCREMENT       reduce using rule 14 (expression -> expression ADD expression .)
    }               reduce using rule 14 (expression -> expression ADD expression .)
    IDENTIFIER      reduce using rule 14 (expression -> expression ADD expression .)
    INT             reduce using rule 14 (expression -> expression ADD expression .)
    FLOAT           reduce using rule 14 (expression -> expression ADD expression .)
    STR             reduce using rule 14 (expression -> expression ADD expression .)
    ADAPT           reduce using rule 14 (expression -> expression ADD expression .)
    PRINT           reduce using rule 14 (expression -> expression ADD expression .)
    RETURN          reduce using rule 14 (expression -> expression ADD expression .)
    LPAREN          reduce using rule 14 (expression -> expression ADD expression .)
    DECREMENT       reduce using rule 14 (expression -> expression ADD expression .)
    IF              reduce using rule 14 (expression -> expression ADD expression .)
    FN              reduce using rule 14 (expression -> expression ADD expression .)
    INT_VALUE       reduce using rule 14 (expression -> expression ADD expression .)
    FLOAT_VALUE     reduce using rule 14 (expression -> expression ADD expression .)
    STRING_VALUE    reduce using rule 14 (expression -> expression ADD expression .)
    FOR             reduce using rule 14 (expression -> expression ADD expression .)
    RPAREN          reduce using rule 14 (expression -> expression ADD expression .)
    ;               reduce using rule 14 (expression -> expression ADD expression .)
    ,               reduce using rule 14 (expression -> expression ADD expression .)
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    WHILE           reduce using rule 10 (statement -> expression .)

  ! DIV             [ reduce using rule 14 (expression -> expression ADD expression .) ]
  ! MUL             [ reduce using rule 14 (expression -> expression ADD expression .) ]
  ! WHILE           [ reduce using rule 14 (expression -> expression ADD expression .) ]
  ! ADD             [ shift and go to state 38 ]
  ! SUB             [ shift and go to state 39 ]
  ! LE              [ shift and go to state 42 ]
  ! GE              [ shift and go to state 43 ]
  ! EQ              [ shift and go to state 44 ]
  ! NE              [ shift and go to state 45 ]
  ! GT              [ shift and go to state 46 ]
  ! LT              [ shift and go to state 47 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 49 ]
  ! INCREMENT       [ shift and go to state 50 ]


state 73

    (15) expression -> expression SUB expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

  ! reduce/reduce conflict for WHILE resolved using rule 10 (statement -> expression .)
    ADD             reduce using rule 15 (expression -> expression SUB expression .)
    SUB             reduce using rule 15 (expression -> expression SUB expression .)
    LE              reduce using rule 15 (expression -> expression SUB expression .)
    GE              reduce using rule 15 (expression -> expression SUB expression .)
    EQ              reduce using rule 15 (expression -> expression SUB expression .)
    NE              reduce using rule 15 (expression -> expression SUB expression .)
    GT              reduce using rule 15 (expression -> expression SUB expression .)
    LT              reduce using rule 15 (expression -> expression SUB expression .)
    AND             reduce using rule 15 (expression -> expression SUB expression .)
    OR              reduce using rule 15 (expression -> expression SUB expression .)
    INCREMENT       reduce using rule 15 (expression -> expression SUB expression .)
    }               reduce using rule 15 (expression -> expression SUB expression .)
    IDENTIFIER      reduce using rule 15 (expression -> expression SUB expression .)
    INT             reduce using rule 15 (expression -> expression SUB expression .)
    FLOAT           reduce using rule 15 (expression -> expression SUB expression .)
    STR             reduce using rule 15 (expression -> expression SUB expression .)
    ADAPT           reduce using rule 15 (expression -> expression SUB expression .)
    PRINT           reduce using rule 15 (expression -> expression SUB expression .)
    RETURN          reduce using rule 15 (expression -> expression SUB expression .)
    LPAREN          reduce using rule 15 (expression -> expression SUB expression .)
    DECREMENT       reduce using rule 15 (expression -> expression SUB expression .)
    IF              reduce using rule 15 (expression -> expression SUB expression .)
    FN              reduce using rule 15 (expression -> expression SUB expression .)
    INT_VALUE       reduce using rule 15 (expression -> expression SUB expression .)
    FLOAT_VALUE     reduce using rule 15 (expression -> expression SUB expression .)
    STRING_VALUE    reduce using rule 15 (expression -> expression SUB expression .)
    FOR             reduce using rule 15 (expression -> expression SUB expression .)
    RPAREN          reduce using rule 15 (expression -> expression SUB expression .)
    ;               reduce using rule 15 (expression -> expression SUB expression .)
    ,               reduce using rule 15 (expression -> expression SUB expression .)
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    WHILE           reduce using rule 10 (statement -> expression .)

  ! DIV             [ reduce using rule 15 (expression -> expression SUB expression .) ]
  ! MUL             [ reduce using rule 15 (expression -> expression SUB expression .) ]
  ! WHILE           [ reduce using rule 15 (expression -> expression SUB expression .) ]
  ! ADD             [ shift and go to state 38 ]
  ! SUB             [ shift and go to state 39 ]
  ! LE              [ shift and go to state 42 ]
  ! GE              [ shift and go to state 43 ]
  ! EQ              [ shift and go to state 44 ]
  ! NE              [ shift and go to state 45 ]
  ! GT              [ shift and go to state 46 ]
  ! LT              [ shift and go to state 47 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 49 ]
  ! INCREMENT       [ shift and go to state 50 ]


state 74

    (16) expression -> expression DIV expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

  ! reduce/reduce conflict for WHILE resolved using rule 10 (statement -> expression .)
    ADD             reduce using rule 16 (expression -> expression DIV expression .)
    SUB             reduce using rule 16 (expression -> expression DIV expression .)
    DIV             reduce using rule 16 (expression -> expression DIV expression .)
    MUL             reduce using rule 16 (expression -> expression DIV expression .)
    LE              reduce using rule 16 (expression -> expression DIV expression .)
    GE              reduce using rule 16 (expression -> expression DIV expression .)
    EQ              reduce using rule 16 (expression -> expression DIV expression .)
    NE              reduce using rule 16 (expression -> expression DIV expression .)
    GT              reduce using rule 16 (expression -> expression DIV expression .)
    LT              reduce using rule 16 (expression -> expression DIV expression .)
    AND             reduce using rule 16 (expression -> expression DIV expression .)
    OR              reduce using rule 16 (expression -> expression DIV expression .)
    INCREMENT       reduce using rule 16 (expression -> expression DIV expression .)
    }               reduce using rule 16 (expression -> expression DIV expression .)
    IDENTIFIER      reduce using rule 16 (expression -> expression DIV expression .)
    INT             reduce using rule 16 (expression -> expression DIV expression .)
    FLOAT           reduce using rule 16 (expression -> expression DIV expression .)
    STR             reduce using rule 16 (expression -> expression DIV expression .)
    ADAPT           reduce using rule 16 (expression -> expression DIV expression .)
    PRINT           reduce using rule 16 (expression -> expression DIV expression .)
    RETURN          reduce using rule 16 (expression -> expression DIV expression .)
    LPAREN          reduce using rule 16 (expression -> expression DIV expression .)
    DECREMENT       reduce using rule 16 (expression -> expression DIV expression .)
    IF              reduce using rule 16 (expression -> expression DIV expression .)
    FN              reduce using rule 16 (expression -> expression DIV expression .)
    INT_VALUE       reduce using rule 16 (expression -> expression DIV expression .)
    FLOAT_VALUE     reduce using rule 16 (expression -> expression DIV expression .)
    STRING_VALUE    reduce using rule 16 (expression -> expression DIV expression .)
    FOR             reduce using rule 16 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 16 (expression -> expression DIV expression .)
    ;               reduce using rule 16 (expression -> expression DIV expression .)
    ,               reduce using rule 16 (expression -> expression DIV expression .)
    WHILE           reduce using rule 10 (statement -> expression .)

  ! WHILE           [ reduce using rule 16 (expression -> expression DIV expression .) ]
  ! ADD             [ shift and go to state 38 ]
  ! SUB             [ shift and go to state 39 ]
  ! DIV             [ shift and go to state 40 ]
  ! MUL             [ shift and go to state 41 ]
  ! LE              [ shift and go to state 42 ]
  ! GE              [ shift and go to state 43 ]
  ! EQ              [ shift and go to state 44 ]
  ! NE              [ shift and go to state 45 ]
  ! GT              [ shift and go to state 46 ]
  ! LT              [ shift and go to state 47 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 49 ]
  ! INCREMENT       [ shift and go to state 50 ]


state 75

    (17) expression -> expression MUL expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

  ! reduce/reduce conflict for WHILE resolved using rule 10 (statement -> expression .)
    ADD             reduce using rule 17 (expression -> expression MUL expression .)
    SUB             reduce using rule 17 (expression -> expression MUL expression .)
    DIV             reduce using rule 17 (expression -> expression MUL expression .)
    MUL             reduce using rule 17 (expression -> expression MUL expression .)
    LE              reduce using rule 17 (expression -> expression MUL expression .)
    GE              reduce using rule 17 (expression -> expression MUL expression .)
    EQ              reduce using rule 17 (expression -> expression MUL expression .)
    NE              reduce using rule 17 (expression -> expression MUL expression .)
    GT              reduce using rule 17 (expression -> expression MUL expression .)
    LT              reduce using rule 17 (expression -> expression MUL expression .)
    AND             reduce using rule 17 (expression -> expression MUL expression .)
    OR              reduce using rule 17 (expression -> expression MUL expression .)
    INCREMENT       reduce using rule 17 (expression -> expression MUL expression .)
    }               reduce using rule 17 (expression -> expression MUL expression .)
    IDENTIFIER      reduce using rule 17 (expression -> expression MUL expression .)
    INT             reduce using rule 17 (expression -> expression MUL expression .)
    FLOAT           reduce using rule 17 (expression -> expression MUL expression .)
    STR             reduce using rule 17 (expression -> expression MUL expression .)
    ADAPT           reduce using rule 17 (expression -> expression MUL expression .)
    PRINT           reduce using rule 17 (expression -> expression MUL expression .)
    RETURN          reduce using rule 17 (expression -> expression MUL expression .)
    LPAREN          reduce using rule 17 (expression -> expression MUL expression .)
    DECREMENT       reduce using rule 17 (expression -> expression MUL expression .)
    IF              reduce using rule 17 (expression -> expression MUL expression .)
    FN              reduce using rule 17 (expression -> expression MUL expression .)
    INT_VALUE       reduce using rule 17 (expression -> expression MUL expression .)
    FLOAT_VALUE     reduce using rule 17 (expression -> expression MUL expression .)
    STRING_VALUE    reduce using rule 17 (expression -> expression MUL expression .)
    FOR             reduce using rule 17 (expression -> expression MUL expression .)
    RPAREN          reduce using rule 17 (expression -> expression MUL expression .)
    ;               reduce using rule 17 (expression -> expression MUL expression .)
    ,               reduce using rule 17 (expression -> expression MUL expression .)
    WHILE           reduce using rule 10 (statement -> expression .)

  ! WHILE           [ reduce using rule 17 (expression -> expression MUL expression .) ]
  ! ADD             [ shift and go to state 38 ]
  ! SUB             [ shift and go to state 39 ]
  ! DIV             [ shift and go to state 40 ]
  ! MUL             [ shift and go to state 41 ]
  ! LE              [ shift and go to state 42 ]
  ! GE              [ shift and go to state 43 ]
  ! EQ              [ shift and go to state 44 ]
  ! NE              [ shift and go to state 45 ]
  ! GT              [ shift and go to state 46 ]
  ! LT              [ shift and go to state 47 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 49 ]
  ! INCREMENT       [ shift and go to state 50 ]


state 76

    (20) expression -> expression LE expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! reduce/reduce conflict for WHILE resolved using rule 10 (statement -> expression .)
    }               reduce using rule 20 (expression -> expression LE expression .)
    IDENTIFIER      reduce using rule 20 (expression -> expression LE expression .)
    INT             reduce using rule 20 (expression -> expression LE expression .)
    FLOAT           reduce using rule 20 (expression -> expression LE expression .)
    STR             reduce using rule 20 (expression -> expression LE expression .)
    ADAPT           reduce using rule 20 (expression -> expression LE expression .)
    PRINT           reduce using rule 20 (expression -> expression LE expression .)
    RETURN          reduce using rule 20 (expression -> expression LE expression .)
    LPAREN          reduce using rule 20 (expression -> expression LE expression .)
    DECREMENT       reduce using rule 20 (expression -> expression LE expression .)
    IF              reduce using rule 20 (expression -> expression LE expression .)
    FN              reduce using rule 20 (expression -> expression LE expression .)
    INT_VALUE       reduce using rule 20 (expression -> expression LE expression .)
    FLOAT_VALUE     reduce using rule 20 (expression -> expression LE expression .)
    STRING_VALUE    reduce using rule 20 (expression -> expression LE expression .)
    FOR             reduce using rule 20 (expression -> expression LE expression .)
    RPAREN          reduce using rule 20 (expression -> expression LE expression .)
    ;               reduce using rule 20 (expression -> expression LE expression .)
    ,               reduce using rule 20 (expression -> expression LE expression .)
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50
    WHILE           reduce using rule 10 (statement -> expression .)

  ! ADD             [ reduce using rule 20 (expression -> expression LE expression .) ]
  ! SUB             [ reduce using rule 20 (expression -> expression LE expression .) ]
  ! DIV             [ reduce using rule 20 (expression -> expression LE expression .) ]
  ! MUL             [ reduce using rule 20 (expression -> expression LE expression .) ]
  ! LE              [ reduce using rule 20 (expression -> expression LE expression .) ]
  ! GE              [ reduce using rule 20 (expression -> expression LE expression .) ]
  ! EQ              [ reduce using rule 20 (expression -> expression LE expression .) ]
  ! NE              [ reduce using rule 20 (expression -> expression LE expression .) ]
  ! GT              [ reduce using rule 20 (expression -> expression LE expression .) ]
  ! LT              [ reduce using rule 20 (expression -> expression LE expression .) ]
  ! AND             [ reduce using rule 20 (expression -> expression LE expression .) ]
  ! OR              [ reduce using rule 20 (expression -> expression LE expression .) ]
  ! INCREMENT       [ reduce using rule 20 (expression -> expression LE expression .) ]
  ! WHILE           [ reduce using rule 20 (expression -> expression LE expression .) ]


state 77

    (21) expression -> expression GE expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! reduce/reduce conflict for WHILE resolved using rule 10 (statement -> expression .)
    }               reduce using rule 21 (expression -> expression GE expression .)
    IDENTIFIER      reduce using rule 21 (expression -> expression GE expression .)
    INT             reduce using rule 21 (expression -> expression GE expression .)
    FLOAT           reduce using rule 21 (expression -> expression GE expression .)
    STR             reduce using rule 21 (expression -> expression GE expression .)
    ADAPT           reduce using rule 21 (expression -> expression GE expression .)
    PRINT           reduce using rule 21 (expression -> expression GE expression .)
    RETURN          reduce using rule 21 (expression -> expression GE expression .)
    LPAREN          reduce using rule 21 (expression -> expression GE expression .)
    DECREMENT       reduce using rule 21 (expression -> expression GE expression .)
    IF              reduce using rule 21 (expression -> expression GE expression .)
    FN              reduce using rule 21 (expression -> expression GE expression .)
    INT_VALUE       reduce using rule 21 (expression -> expression GE expression .)
    FLOAT_VALUE     reduce using rule 21 (expression -> expression GE expression .)
    STRING_VALUE    reduce using rule 21 (expression -> expression GE expression .)
    FOR             reduce using rule 21 (expression -> expression GE expression .)
    RPAREN          reduce using rule 21 (expression -> expression GE expression .)
    ;               reduce using rule 21 (expression -> expression GE expression .)
    ,               reduce using rule 21 (expression -> expression GE expression .)
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50
    WHILE           reduce using rule 10 (statement -> expression .)

  ! ADD             [ reduce using rule 21 (expression -> expression GE expression .) ]
  ! SUB             [ reduce using rule 21 (expression -> expression GE expression .) ]
  ! DIV             [ reduce using rule 21 (expression -> expression GE expression .) ]
  ! MUL             [ reduce using rule 21 (expression -> expression GE expression .) ]
  ! LE              [ reduce using rule 21 (expression -> expression GE expression .) ]
  ! GE              [ reduce using rule 21 (expression -> expression GE expression .) ]
  ! EQ              [ reduce using rule 21 (expression -> expression GE expression .) ]
  ! NE              [ reduce using rule 21 (expression -> expression GE expression .) ]
  ! GT              [ reduce using rule 21 (expression -> expression GE expression .) ]
  ! LT              [ reduce using rule 21 (expression -> expression GE expression .) ]
  ! AND             [ reduce using rule 21 (expression -> expression GE expression .) ]
  ! OR              [ reduce using rule 21 (expression -> expression GE expression .) ]
  ! INCREMENT       [ reduce using rule 21 (expression -> expression GE expression .) ]
  ! WHILE           [ reduce using rule 21 (expression -> expression GE expression .) ]


state 78

    (22) expression -> expression EQ expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! reduce/reduce conflict for WHILE resolved using rule 10 (statement -> expression .)
    }               reduce using rule 22 (expression -> expression EQ expression .)
    IDENTIFIER      reduce using rule 22 (expression -> expression EQ expression .)
    INT             reduce using rule 22 (expression -> expression EQ expression .)
    FLOAT           reduce using rule 22 (expression -> expression EQ expression .)
    STR             reduce using rule 22 (expression -> expression EQ expression .)
    ADAPT           reduce using rule 22 (expression -> expression EQ expression .)
    PRINT           reduce using rule 22 (expression -> expression EQ expression .)
    RETURN          reduce using rule 22 (expression -> expression EQ expression .)
    LPAREN          reduce using rule 22 (expression -> expression EQ expression .)
    DECREMENT       reduce using rule 22 (expression -> expression EQ expression .)
    IF              reduce using rule 22 (expression -> expression EQ expression .)
    FN              reduce using rule 22 (expression -> expression EQ expression .)
    INT_VALUE       reduce using rule 22 (expression -> expression EQ expression .)
    FLOAT_VALUE     reduce using rule 22 (expression -> expression EQ expression .)
    STRING_VALUE    reduce using rule 22 (expression -> expression EQ expression .)
    FOR             reduce using rule 22 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 22 (expression -> expression EQ expression .)
    ;               reduce using rule 22 (expression -> expression EQ expression .)
    ,               reduce using rule 22 (expression -> expression EQ expression .)
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50
    WHILE           reduce using rule 10 (statement -> expression .)

  ! ADD             [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! SUB             [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! DIV             [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! MUL             [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! NE              [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! AND             [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! OR              [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! INCREMENT       [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! WHILE           [ reduce using rule 22 (expression -> expression EQ expression .) ]


state 79

    (23) expression -> expression NE expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! reduce/reduce conflict for WHILE resolved using rule 10 (statement -> expression .)
    }               reduce using rule 23 (expression -> expression NE expression .)
    IDENTIFIER      reduce using rule 23 (expression -> expression NE expression .)
    INT             reduce using rule 23 (expression -> expression NE expression .)
    FLOAT           reduce using rule 23 (expression -> expression NE expression .)
    STR             reduce using rule 23 (expression -> expression NE expression .)
    ADAPT           reduce using rule 23 (expression -> expression NE expression .)
    PRINT           reduce using rule 23 (expression -> expression NE expression .)
    RETURN          reduce using rule 23 (expression -> expression NE expression .)
    LPAREN          reduce using rule 23 (expression -> expression NE expression .)
    DECREMENT       reduce using rule 23 (expression -> expression NE expression .)
    IF              reduce using rule 23 (expression -> expression NE expression .)
    FN              reduce using rule 23 (expression -> expression NE expression .)
    INT_VALUE       reduce using rule 23 (expression -> expression NE expression .)
    FLOAT_VALUE     reduce using rule 23 (expression -> expression NE expression .)
    STRING_VALUE    reduce using rule 23 (expression -> expression NE expression .)
    FOR             reduce using rule 23 (expression -> expression NE expression .)
    RPAREN          reduce using rule 23 (expression -> expression NE expression .)
    ;               reduce using rule 23 (expression -> expression NE expression .)
    ,               reduce using rule 23 (expression -> expression NE expression .)
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50
    WHILE           reduce using rule 10 (statement -> expression .)

  ! ADD             [ reduce using rule 23 (expression -> expression NE expression .) ]
  ! SUB             [ reduce using rule 23 (expression -> expression NE expression .) ]
  ! DIV             [ reduce using rule 23 (expression -> expression NE expression .) ]
  ! MUL             [ reduce using rule 23 (expression -> expression NE expression .) ]
  ! LE              [ reduce using rule 23 (expression -> expression NE expression .) ]
  ! GE              [ reduce using rule 23 (expression -> expression NE expression .) ]
  ! EQ              [ reduce using rule 23 (expression -> expression NE expression .) ]
  ! NE              [ reduce using rule 23 (expression -> expression NE expression .) ]
  ! GT              [ reduce using rule 23 (expression -> expression NE expression .) ]
  ! LT              [ reduce using rule 23 (expression -> expression NE expression .) ]
  ! AND             [ reduce using rule 23 (expression -> expression NE expression .) ]
  ! OR              [ reduce using rule 23 (expression -> expression NE expression .) ]
  ! INCREMENT       [ reduce using rule 23 (expression -> expression NE expression .) ]
  ! WHILE           [ reduce using rule 23 (expression -> expression NE expression .) ]


state 80

    (24) expression -> expression GT expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! reduce/reduce conflict for WHILE resolved using rule 10 (statement -> expression .)
    }               reduce using rule 24 (expression -> expression GT expression .)
    IDENTIFIER      reduce using rule 24 (expression -> expression GT expression .)
    INT             reduce using rule 24 (expression -> expression GT expression .)
    FLOAT           reduce using rule 24 (expression -> expression GT expression .)
    STR             reduce using rule 24 (expression -> expression GT expression .)
    ADAPT           reduce using rule 24 (expression -> expression GT expression .)
    PRINT           reduce using rule 24 (expression -> expression GT expression .)
    RETURN          reduce using rule 24 (expression -> expression GT expression .)
    LPAREN          reduce using rule 24 (expression -> expression GT expression .)
    DECREMENT       reduce using rule 24 (expression -> expression GT expression .)
    IF              reduce using rule 24 (expression -> expression GT expression .)
    FN              reduce using rule 24 (expression -> expression GT expression .)
    INT_VALUE       reduce using rule 24 (expression -> expression GT expression .)
    FLOAT_VALUE     reduce using rule 24 (expression -> expression GT expression .)
    STRING_VALUE    reduce using rule 24 (expression -> expression GT expression .)
    FOR             reduce using rule 24 (expression -> expression GT expression .)
    RPAREN          reduce using rule 24 (expression -> expression GT expression .)
    ;               reduce using rule 24 (expression -> expression GT expression .)
    ,               reduce using rule 24 (expression -> expression GT expression .)
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50
    WHILE           reduce using rule 10 (statement -> expression .)

  ! ADD             [ reduce using rule 24 (expression -> expression GT expression .) ]
  ! SUB             [ reduce using rule 24 (expression -> expression GT expression .) ]
  ! DIV             [ reduce using rule 24 (expression -> expression GT expression .) ]
  ! MUL             [ reduce using rule 24 (expression -> expression GT expression .) ]
  ! LE              [ reduce using rule 24 (expression -> expression GT expression .) ]
  ! GE              [ reduce using rule 24 (expression -> expression GT expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression GT expression .) ]
  ! NE              [ reduce using rule 24 (expression -> expression GT expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression GT expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression GT expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression GT expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression GT expression .) ]
  ! INCREMENT       [ reduce using rule 24 (expression -> expression GT expression .) ]
  ! WHILE           [ reduce using rule 24 (expression -> expression GT expression .) ]


state 81

    (25) expression -> expression LT expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! reduce/reduce conflict for WHILE resolved using rule 10 (statement -> expression .)
    }               reduce using rule 25 (expression -> expression LT expression .)
    IDENTIFIER      reduce using rule 25 (expression -> expression LT expression .)
    INT             reduce using rule 25 (expression -> expression LT expression .)
    FLOAT           reduce using rule 25 (expression -> expression LT expression .)
    STR             reduce using rule 25 (expression -> expression LT expression .)
    ADAPT           reduce using rule 25 (expression -> expression LT expression .)
    PRINT           reduce using rule 25 (expression -> expression LT expression .)
    RETURN          reduce using rule 25 (expression -> expression LT expression .)
    LPAREN          reduce using rule 25 (expression -> expression LT expression .)
    DECREMENT       reduce using rule 25 (expression -> expression LT expression .)
    IF              reduce using rule 25 (expression -> expression LT expression .)
    FN              reduce using rule 25 (expression -> expression LT expression .)
    INT_VALUE       reduce using rule 25 (expression -> expression LT expression .)
    FLOAT_VALUE     reduce using rule 25 (expression -> expression LT expression .)
    STRING_VALUE    reduce using rule 25 (expression -> expression LT expression .)
    FOR             reduce using rule 25 (expression -> expression LT expression .)
    RPAREN          reduce using rule 25 (expression -> expression LT expression .)
    ;               reduce using rule 25 (expression -> expression LT expression .)
    ,               reduce using rule 25 (expression -> expression LT expression .)
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50
    WHILE           reduce using rule 10 (statement -> expression .)

  ! ADD             [ reduce using rule 25 (expression -> expression LT expression .) ]
  ! SUB             [ reduce using rule 25 (expression -> expression LT expression .) ]
  ! DIV             [ reduce using rule 25 (expression -> expression LT expression .) ]
  ! MUL             [ reduce using rule 25 (expression -> expression LT expression .) ]
  ! LE              [ reduce using rule 25 (expression -> expression LT expression .) ]
  ! GE              [ reduce using rule 25 (expression -> expression LT expression .) ]
  ! EQ              [ reduce using rule 25 (expression -> expression LT expression .) ]
  ! NE              [ reduce using rule 25 (expression -> expression LT expression .) ]
  ! GT              [ reduce using rule 25 (expression -> expression LT expression .) ]
  ! LT              [ reduce using rule 25 (expression -> expression LT expression .) ]
  ! AND             [ reduce using rule 25 (expression -> expression LT expression .) ]
  ! OR              [ reduce using rule 25 (expression -> expression LT expression .) ]
  ! INCREMENT       [ reduce using rule 25 (expression -> expression LT expression .) ]
  ! WHILE           [ reduce using rule 25 (expression -> expression LT expression .) ]


state 82

    (26) expression -> expression AND expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! reduce/reduce conflict for WHILE resolved using rule 10 (statement -> expression .)
    }               reduce using rule 26 (expression -> expression AND expression .)
    IDENTIFIER      reduce using rule 26 (expression -> expression AND expression .)
    INT             reduce using rule 26 (expression -> expression AND expression .)
    FLOAT           reduce using rule 26 (expression -> expression AND expression .)
    STR             reduce using rule 26 (expression -> expression AND expression .)
    ADAPT           reduce using rule 26 (expression -> expression AND expression .)
    PRINT           reduce using rule 26 (expression -> expression AND expression .)
    RETURN          reduce using rule 26 (expression -> expression AND expression .)
    LPAREN          reduce using rule 26 (expression -> expression AND expression .)
    DECREMENT       reduce using rule 26 (expression -> expression AND expression .)
    IF              reduce using rule 26 (expression -> expression AND expression .)
    FN              reduce using rule 26 (expression -> expression AND expression .)
    INT_VALUE       reduce using rule 26 (expression -> expression AND expression .)
    FLOAT_VALUE     reduce using rule 26 (expression -> expression AND expression .)
    STRING_VALUE    reduce using rule 26 (expression -> expression AND expression .)
    FOR             reduce using rule 26 (expression -> expression AND expression .)
    RPAREN          reduce using rule 26 (expression -> expression AND expression .)
    ;               reduce using rule 26 (expression -> expression AND expression .)
    ,               reduce using rule 26 (expression -> expression AND expression .)
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50
    WHILE           reduce using rule 10 (statement -> expression .)

  ! ADD             [ reduce using rule 26 (expression -> expression AND expression .) ]
  ! SUB             [ reduce using rule 26 (expression -> expression AND expression .) ]
  ! DIV             [ reduce using rule 26 (expression -> expression AND expression .) ]
  ! MUL             [ reduce using rule 26 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 26 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 26 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 26 (expression -> expression AND expression .) ]
  ! NE              [ reduce using rule 26 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 26 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 26 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 26 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 26 (expression -> expression AND expression .) ]
  ! INCREMENT       [ reduce using rule 26 (expression -> expression AND expression .) ]
  ! WHILE           [ reduce using rule 26 (expression -> expression AND expression .) ]


state 83

    (27) expression -> expression OR expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! reduce/reduce conflict for WHILE resolved using rule 10 (statement -> expression .)
    }               reduce using rule 27 (expression -> expression OR expression .)
    IDENTIFIER      reduce using rule 27 (expression -> expression OR expression .)
    INT             reduce using rule 27 (expression -> expression OR expression .)
    FLOAT           reduce using rule 27 (expression -> expression OR expression .)
    STR             reduce using rule 27 (expression -> expression OR expression .)
    ADAPT           reduce using rule 27 (expression -> expression OR expression .)
    PRINT           reduce using rule 27 (expression -> expression OR expression .)
    RETURN          reduce using rule 27 (expression -> expression OR expression .)
    LPAREN          reduce using rule 27 (expression -> expression OR expression .)
    DECREMENT       reduce using rule 27 (expression -> expression OR expression .)
    IF              reduce using rule 27 (expression -> expression OR expression .)
    FN              reduce using rule 27 (expression -> expression OR expression .)
    INT_VALUE       reduce using rule 27 (expression -> expression OR expression .)
    FLOAT_VALUE     reduce using rule 27 (expression -> expression OR expression .)
    STRING_VALUE    reduce using rule 27 (expression -> expression OR expression .)
    FOR             reduce using rule 27 (expression -> expression OR expression .)
    RPAREN          reduce using rule 27 (expression -> expression OR expression .)
    ;               reduce using rule 27 (expression -> expression OR expression .)
    ,               reduce using rule 27 (expression -> expression OR expression .)
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50
    WHILE           reduce using rule 10 (statement -> expression .)

  ! ADD             [ reduce using rule 27 (expression -> expression OR expression .) ]
  ! SUB             [ reduce using rule 27 (expression -> expression OR expression .) ]
  ! DIV             [ reduce using rule 27 (expression -> expression OR expression .) ]
  ! MUL             [ reduce using rule 27 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 27 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 27 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 27 (expression -> expression OR expression .) ]
  ! NE              [ reduce using rule 27 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 27 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 27 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 27 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 27 (expression -> expression OR expression .) ]
  ! INCREMENT       [ reduce using rule 27 (expression -> expression OR expression .) ]
  ! WHILE           [ reduce using rule 27 (expression -> expression OR expression .) ]


state 84

    (6) statement -> INT IDENTIFIER EQUAL . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 97
    statement                      shift and go to state 32

state 85

    (7) statement -> FLOAT IDENTIFIER EQUAL . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 98
    statement                      shift and go to state 32

state 86

    (8) statement -> STR IDENTIFIER EQUAL . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 99
    statement                      shift and go to state 32

state 87

    (9) statement -> ADAPT IDENTIFIER EQUAL . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 100
    statement                      shift and go to state 32

state 88

    (11) statement -> PRINT LPAREN expression . RPAREN
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

    RPAREN          shift and go to state 101
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50
    WHILE           reduce using rule 10 (statement -> expression .)


state 89

    (12) statement -> PRINT LPAREN STRING_VALUE . RPAREN
    (50) expression -> STRING_VALUE .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 102
    ADD             reduce using rule 50 (expression -> STRING_VALUE .)
    SUB             reduce using rule 50 (expression -> STRING_VALUE .)
    DIV             reduce using rule 50 (expression -> STRING_VALUE .)
    MUL             reduce using rule 50 (expression -> STRING_VALUE .)
    LE              reduce using rule 50 (expression -> STRING_VALUE .)
    GE              reduce using rule 50 (expression -> STRING_VALUE .)
    EQ              reduce using rule 50 (expression -> STRING_VALUE .)
    NE              reduce using rule 50 (expression -> STRING_VALUE .)
    GT              reduce using rule 50 (expression -> STRING_VALUE .)
    LT              reduce using rule 50 (expression -> STRING_VALUE .)
    AND             reduce using rule 50 (expression -> STRING_VALUE .)
    OR              reduce using rule 50 (expression -> STRING_VALUE .)
    INCREMENT       reduce using rule 50 (expression -> STRING_VALUE .)
    WHILE           reduce using rule 50 (expression -> STRING_VALUE .)

  ! RPAREN          [ reduce using rule 50 (expression -> STRING_VALUE .) ]


state 90

    (34) expression -> IF LPAREN expression . RPAREN { statements } ELSE { statements }
    (35) expression -> IF LPAREN expression . RPAREN { statements }
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

    RPAREN          shift and go to state 103
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50
    WHILE           reduce using rule 10 (statement -> expression .)


state 91

    (40) expression -> FN IDENTIFIER LPAREN . RPAREN : INT { statements }
    (41) expression -> FN IDENTIFIER LPAREN . RPAREN : FLOAT { statements }
    (42) expression -> FN IDENTIFIER LPAREN . RPAREN : STR { statements }
    (43) expression -> FN IDENTIFIER LPAREN . RPAREN : VOID { statements }
    (44) expression -> FN IDENTIFIER LPAREN . expressions RPAREN : INT { statements }
    (45) expression -> FN IDENTIFIER LPAREN . expressions RPAREN : FLOAT { statements }
    (46) expression -> FN IDENTIFIER LPAREN . expressions RPAREN : STR { statements }
    (47) expression -> FN IDENTIFIER LPAREN . expressions RPAREN : VOID { statements }
    (30) expressions -> . expressions , expression
    (31) expressions -> . expression
    (32) expressions -> .
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 104
    ,               reduce using rule 32 (expressions -> .)
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

  ! RPAREN          [ reduce using rule 32 (expressions -> .) ]

    expressions                    shift and go to state 105
    expression                     shift and go to state 71
    statement                      shift and go to state 32

state 92

    (52) expression -> FOR LPAREN statement . ; expression ; expression RPAREN { statements }
    (53) expression -> statement . WHILE LPAREN expression RPAREN { statements }

    ;               shift and go to state 106
    WHILE           shift and go to state 35


state 93

    (53) expression -> statement WHILE LPAREN expression . RPAREN { statements }
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

    RPAREN          shift and go to state 107
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50
    WHILE           reduce using rule 10 (statement -> expression .)


state 94

    (5) statement -> IDENTIFIER EQUAL ACCEPT LPAREN . RPAREN

    RPAREN          shift and go to state 108


state 95

    (33) expression -> IDENTIFIER LPAREN expressions RPAREN .

    ADD             reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    SUB             reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    DIV             reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    MUL             reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    LE              reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    GE              reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    EQ              reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    NE              reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    GT              reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    LT              reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    AND             reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    OR              reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    INCREMENT       reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    WHILE           reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    }               reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    IDENTIFIER      reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    INT             reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    FLOAT           reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    STR             reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    ADAPT           reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    PRINT           reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    RETURN          reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    LPAREN          reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    DECREMENT       reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    IF              reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    FN              reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    INT_VALUE       reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    FLOAT_VALUE     reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    STRING_VALUE    reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    FOR             reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    RPAREN          reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    ;               reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)
    ,               reduce using rule 33 (expression -> IDENTIFIER LPAREN expressions RPAREN .)


state 96

    (30) expressions -> expressions , . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    expression                     shift and go to state 109
    statement                      shift and go to state 32

state 97

    (6) statement -> INT IDENTIFIER EQUAL expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

  ! shift/reduce conflict for SUB resolved as shift
  ! reduce/reduce conflict for WHILE resolved using rule 6 (statement -> INT IDENTIFIER EQUAL expression .)
    WHILE           reduce using rule 6 (statement -> INT IDENTIFIER EQUAL expression .)
    }               reduce using rule 6 (statement -> INT IDENTIFIER EQUAL expression .)
    IDENTIFIER      reduce using rule 6 (statement -> INT IDENTIFIER EQUAL expression .)
    INT             reduce using rule 6 (statement -> INT IDENTIFIER EQUAL expression .)
    FLOAT           reduce using rule 6 (statement -> INT IDENTIFIER EQUAL expression .)
    STR             reduce using rule 6 (statement -> INT IDENTIFIER EQUAL expression .)
    ADAPT           reduce using rule 6 (statement -> INT IDENTIFIER EQUAL expression .)
    PRINT           reduce using rule 6 (statement -> INT IDENTIFIER EQUAL expression .)
    RETURN          reduce using rule 6 (statement -> INT IDENTIFIER EQUAL expression .)
    LPAREN          reduce using rule 6 (statement -> INT IDENTIFIER EQUAL expression .)
    DECREMENT       reduce using rule 6 (statement -> INT IDENTIFIER EQUAL expression .)
    IF              reduce using rule 6 (statement -> INT IDENTIFIER EQUAL expression .)
    FN              reduce using rule 6 (statement -> INT IDENTIFIER EQUAL expression .)
    INT_VALUE       reduce using rule 6 (statement -> INT IDENTIFIER EQUAL expression .)
    FLOAT_VALUE     reduce using rule 6 (statement -> INT IDENTIFIER EQUAL expression .)
    STRING_VALUE    reduce using rule 6 (statement -> INT IDENTIFIER EQUAL expression .)
    FOR             reduce using rule 6 (statement -> INT IDENTIFIER EQUAL expression .)
    ;               reduce using rule 6 (statement -> INT IDENTIFIER EQUAL expression .)
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50

  ! SUB             [ reduce using rule 6 (statement -> INT IDENTIFIER EQUAL expression .) ]
  ! WHILE           [ reduce using rule 10 (statement -> expression .) ]


state 98

    (7) statement -> FLOAT IDENTIFIER EQUAL expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

  ! shift/reduce conflict for SUB resolved as shift
  ! reduce/reduce conflict for WHILE resolved using rule 7 (statement -> FLOAT IDENTIFIER EQUAL expression .)
    WHILE           reduce using rule 7 (statement -> FLOAT IDENTIFIER EQUAL expression .)
    }               reduce using rule 7 (statement -> FLOAT IDENTIFIER EQUAL expression .)
    IDENTIFIER      reduce using rule 7 (statement -> FLOAT IDENTIFIER EQUAL expression .)
    INT             reduce using rule 7 (statement -> FLOAT IDENTIFIER EQUAL expression .)
    FLOAT           reduce using rule 7 (statement -> FLOAT IDENTIFIER EQUAL expression .)
    STR             reduce using rule 7 (statement -> FLOAT IDENTIFIER EQUAL expression .)
    ADAPT           reduce using rule 7 (statement -> FLOAT IDENTIFIER EQUAL expression .)
    PRINT           reduce using rule 7 (statement -> FLOAT IDENTIFIER EQUAL expression .)
    RETURN          reduce using rule 7 (statement -> FLOAT IDENTIFIER EQUAL expression .)
    LPAREN          reduce using rule 7 (statement -> FLOAT IDENTIFIER EQUAL expression .)
    DECREMENT       reduce using rule 7 (statement -> FLOAT IDENTIFIER EQUAL expression .)
    IF              reduce using rule 7 (statement -> FLOAT IDENTIFIER EQUAL expression .)
    FN              reduce using rule 7 (statement -> FLOAT IDENTIFIER EQUAL expression .)
    INT_VALUE       reduce using rule 7 (statement -> FLOAT IDENTIFIER EQUAL expression .)
    FLOAT_VALUE     reduce using rule 7 (statement -> FLOAT IDENTIFIER EQUAL expression .)
    STRING_VALUE    reduce using rule 7 (statement -> FLOAT IDENTIFIER EQUAL expression .)
    FOR             reduce using rule 7 (statement -> FLOAT IDENTIFIER EQUAL expression .)
    ;               reduce using rule 7 (statement -> FLOAT IDENTIFIER EQUAL expression .)
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50

  ! SUB             [ reduce using rule 7 (statement -> FLOAT IDENTIFIER EQUAL expression .) ]
  ! WHILE           [ reduce using rule 10 (statement -> expression .) ]


state 99

    (8) statement -> STR IDENTIFIER EQUAL expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

  ! shift/reduce conflict for SUB resolved as shift
  ! reduce/reduce conflict for WHILE resolved using rule 8 (statement -> STR IDENTIFIER EQUAL expression .)
    WHILE           reduce using rule 8 (statement -> STR IDENTIFIER EQUAL expression .)
    }               reduce using rule 8 (statement -> STR IDENTIFIER EQUAL expression .)
    IDENTIFIER      reduce using rule 8 (statement -> STR IDENTIFIER EQUAL expression .)
    INT             reduce using rule 8 (statement -> STR IDENTIFIER EQUAL expression .)
    FLOAT           reduce using rule 8 (statement -> STR IDENTIFIER EQUAL expression .)
    STR             reduce using rule 8 (statement -> STR IDENTIFIER EQUAL expression .)
    ADAPT           reduce using rule 8 (statement -> STR IDENTIFIER EQUAL expression .)
    PRINT           reduce using rule 8 (statement -> STR IDENTIFIER EQUAL expression .)
    RETURN          reduce using rule 8 (statement -> STR IDENTIFIER EQUAL expression .)
    LPAREN          reduce using rule 8 (statement -> STR IDENTIFIER EQUAL expression .)
    DECREMENT       reduce using rule 8 (statement -> STR IDENTIFIER EQUAL expression .)
    IF              reduce using rule 8 (statement -> STR IDENTIFIER EQUAL expression .)
    FN              reduce using rule 8 (statement -> STR IDENTIFIER EQUAL expression .)
    INT_VALUE       reduce using rule 8 (statement -> STR IDENTIFIER EQUAL expression .)
    FLOAT_VALUE     reduce using rule 8 (statement -> STR IDENTIFIER EQUAL expression .)
    STRING_VALUE    reduce using rule 8 (statement -> STR IDENTIFIER EQUAL expression .)
    FOR             reduce using rule 8 (statement -> STR IDENTIFIER EQUAL expression .)
    ;               reduce using rule 8 (statement -> STR IDENTIFIER EQUAL expression .)
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50

  ! SUB             [ reduce using rule 8 (statement -> STR IDENTIFIER EQUAL expression .) ]
  ! WHILE           [ reduce using rule 10 (statement -> expression .) ]


state 100

    (9) statement -> ADAPT IDENTIFIER EQUAL expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

  ! shift/reduce conflict for SUB resolved as shift
  ! reduce/reduce conflict for WHILE resolved using rule 9 (statement -> ADAPT IDENTIFIER EQUAL expression .)
    WHILE           reduce using rule 9 (statement -> ADAPT IDENTIFIER EQUAL expression .)
    }               reduce using rule 9 (statement -> ADAPT IDENTIFIER EQUAL expression .)
    IDENTIFIER      reduce using rule 9 (statement -> ADAPT IDENTIFIER EQUAL expression .)
    INT             reduce using rule 9 (statement -> ADAPT IDENTIFIER EQUAL expression .)
    FLOAT           reduce using rule 9 (statement -> ADAPT IDENTIFIER EQUAL expression .)
    STR             reduce using rule 9 (statement -> ADAPT IDENTIFIER EQUAL expression .)
    ADAPT           reduce using rule 9 (statement -> ADAPT IDENTIFIER EQUAL expression .)
    PRINT           reduce using rule 9 (statement -> ADAPT IDENTIFIER EQUAL expression .)
    RETURN          reduce using rule 9 (statement -> ADAPT IDENTIFIER EQUAL expression .)
    LPAREN          reduce using rule 9 (statement -> ADAPT IDENTIFIER EQUAL expression .)
    DECREMENT       reduce using rule 9 (statement -> ADAPT IDENTIFIER EQUAL expression .)
    IF              reduce using rule 9 (statement -> ADAPT IDENTIFIER EQUAL expression .)
    FN              reduce using rule 9 (statement -> ADAPT IDENTIFIER EQUAL expression .)
    INT_VALUE       reduce using rule 9 (statement -> ADAPT IDENTIFIER EQUAL expression .)
    FLOAT_VALUE     reduce using rule 9 (statement -> ADAPT IDENTIFIER EQUAL expression .)
    STRING_VALUE    reduce using rule 9 (statement -> ADAPT IDENTIFIER EQUAL expression .)
    FOR             reduce using rule 9 (statement -> ADAPT IDENTIFIER EQUAL expression .)
    ;               reduce using rule 9 (statement -> ADAPT IDENTIFIER EQUAL expression .)
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50

  ! SUB             [ reduce using rule 9 (statement -> ADAPT IDENTIFIER EQUAL expression .) ]
  ! WHILE           [ reduce using rule 10 (statement -> expression .) ]


state 101

    (11) statement -> PRINT LPAREN expression RPAREN .

    WHILE           reduce using rule 11 (statement -> PRINT LPAREN expression RPAREN .)
    }               reduce using rule 11 (statement -> PRINT LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 11 (statement -> PRINT LPAREN expression RPAREN .)
    INT             reduce using rule 11 (statement -> PRINT LPAREN expression RPAREN .)
    FLOAT           reduce using rule 11 (statement -> PRINT LPAREN expression RPAREN .)
    STR             reduce using rule 11 (statement -> PRINT LPAREN expression RPAREN .)
    ADAPT           reduce using rule 11 (statement -> PRINT LPAREN expression RPAREN .)
    PRINT           reduce using rule 11 (statement -> PRINT LPAREN expression RPAREN .)
    RETURN          reduce using rule 11 (statement -> PRINT LPAREN expression RPAREN .)
    SUB             reduce using rule 11 (statement -> PRINT LPAREN expression RPAREN .)
    LPAREN          reduce using rule 11 (statement -> PRINT LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 11 (statement -> PRINT LPAREN expression RPAREN .)
    IF              reduce using rule 11 (statement -> PRINT LPAREN expression RPAREN .)
    FN              reduce using rule 11 (statement -> PRINT LPAREN expression RPAREN .)
    INT_VALUE       reduce using rule 11 (statement -> PRINT LPAREN expression RPAREN .)
    FLOAT_VALUE     reduce using rule 11 (statement -> PRINT LPAREN expression RPAREN .)
    STRING_VALUE    reduce using rule 11 (statement -> PRINT LPAREN expression RPAREN .)
    FOR             reduce using rule 11 (statement -> PRINT LPAREN expression RPAREN .)
    ;               reduce using rule 11 (statement -> PRINT LPAREN expression RPAREN .)


state 102

    (12) statement -> PRINT LPAREN STRING_VALUE RPAREN .

    WHILE           reduce using rule 12 (statement -> PRINT LPAREN STRING_VALUE RPAREN .)
    }               reduce using rule 12 (statement -> PRINT LPAREN STRING_VALUE RPAREN .)
    IDENTIFIER      reduce using rule 12 (statement -> PRINT LPAREN STRING_VALUE RPAREN .)
    INT             reduce using rule 12 (statement -> PRINT LPAREN STRING_VALUE RPAREN .)
    FLOAT           reduce using rule 12 (statement -> PRINT LPAREN STRING_VALUE RPAREN .)
    STR             reduce using rule 12 (statement -> PRINT LPAREN STRING_VALUE RPAREN .)
    ADAPT           reduce using rule 12 (statement -> PRINT LPAREN STRING_VALUE RPAREN .)
    PRINT           reduce using rule 12 (statement -> PRINT LPAREN STRING_VALUE RPAREN .)
    RETURN          reduce using rule 12 (statement -> PRINT LPAREN STRING_VALUE RPAREN .)
    SUB             reduce using rule 12 (statement -> PRINT LPAREN STRING_VALUE RPAREN .)
    LPAREN          reduce using rule 12 (statement -> PRINT LPAREN STRING_VALUE RPAREN .)
    DECREMENT       reduce using rule 12 (statement -> PRINT LPAREN STRING_VALUE RPAREN .)
    IF              reduce using rule 12 (statement -> PRINT LPAREN STRING_VALUE RPAREN .)
    FN              reduce using rule 12 (statement -> PRINT LPAREN STRING_VALUE RPAREN .)
    INT_VALUE       reduce using rule 12 (statement -> PRINT LPAREN STRING_VALUE RPAREN .)
    FLOAT_VALUE     reduce using rule 12 (statement -> PRINT LPAREN STRING_VALUE RPAREN .)
    STRING_VALUE    reduce using rule 12 (statement -> PRINT LPAREN STRING_VALUE RPAREN .)
    FOR             reduce using rule 12 (statement -> PRINT LPAREN STRING_VALUE RPAREN .)
    ;               reduce using rule 12 (statement -> PRINT LPAREN STRING_VALUE RPAREN .)


state 103

    (34) expression -> IF LPAREN expression RPAREN . { statements } ELSE { statements }
    (35) expression -> IF LPAREN expression RPAREN . { statements }

    {               shift and go to state 110


state 104

    (40) expression -> FN IDENTIFIER LPAREN RPAREN . : INT { statements }
    (41) expression -> FN IDENTIFIER LPAREN RPAREN . : FLOAT { statements }
    (42) expression -> FN IDENTIFIER LPAREN RPAREN . : STR { statements }
    (43) expression -> FN IDENTIFIER LPAREN RPAREN . : VOID { statements }

    :               shift and go to state 111


state 105

    (44) expression -> FN IDENTIFIER LPAREN expressions . RPAREN : INT { statements }
    (45) expression -> FN IDENTIFIER LPAREN expressions . RPAREN : FLOAT { statements }
    (46) expression -> FN IDENTIFIER LPAREN expressions . RPAREN : STR { statements }
    (47) expression -> FN IDENTIFIER LPAREN expressions . RPAREN : VOID { statements }
    (30) expressions -> expressions . , expression

    RPAREN          shift and go to state 112
    ,               shift and go to state 96


state 106

    (52) expression -> FOR LPAREN statement ; . expression ; expression RPAREN { statements }
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    statement                      shift and go to state 32
    expression                     shift and go to state 113

state 107

    (53) expression -> statement WHILE LPAREN expression RPAREN . { statements }

    {               shift and go to state 114


state 108

    (5) statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN .

    WHILE           reduce using rule 5 (statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN .)
    }               reduce using rule 5 (statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 5 (statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN .)
    INT             reduce using rule 5 (statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN .)
    FLOAT           reduce using rule 5 (statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN .)
    STR             reduce using rule 5 (statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN .)
    ADAPT           reduce using rule 5 (statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN .)
    PRINT           reduce using rule 5 (statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN .)
    RETURN          reduce using rule 5 (statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN .)
    SUB             reduce using rule 5 (statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN .)
    LPAREN          reduce using rule 5 (statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN .)
    DECREMENT       reduce using rule 5 (statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN .)
    IF              reduce using rule 5 (statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN .)
    FN              reduce using rule 5 (statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN .)
    INT_VALUE       reduce using rule 5 (statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN .)
    FLOAT_VALUE     reduce using rule 5 (statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN .)
    STRING_VALUE    reduce using rule 5 (statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN .)
    FOR             reduce using rule 5 (statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN .)
    ;               reduce using rule 5 (statement -> IDENTIFIER EQUAL ACCEPT LPAREN RPAREN .)


state 109

    (30) expressions -> expressions , expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

    RPAREN          reduce using rule 30 (expressions -> expressions , expression .)
    ,               reduce using rule 30 (expressions -> expressions , expression .)
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50
    WHILE           reduce using rule 10 (statement -> expression .)


state 110

    (34) expression -> IF LPAREN expression RPAREN { . statements } ELSE { statements }
    (35) expression -> IF LPAREN expression RPAREN { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    expression                     shift and go to state 11
    statements                     shift and go to state 115
    statement                      shift and go to state 9

state 111

    (40) expression -> FN IDENTIFIER LPAREN RPAREN : . INT { statements }
    (41) expression -> FN IDENTIFIER LPAREN RPAREN : . FLOAT { statements }
    (42) expression -> FN IDENTIFIER LPAREN RPAREN : . STR { statements }
    (43) expression -> FN IDENTIFIER LPAREN RPAREN : . VOID { statements }

    INT             shift and go to state 116
    FLOAT           shift and go to state 117
    STR             shift and go to state 118
    VOID            shift and go to state 119


state 112

    (44) expression -> FN IDENTIFIER LPAREN expressions RPAREN . : INT { statements }
    (45) expression -> FN IDENTIFIER LPAREN expressions RPAREN . : FLOAT { statements }
    (46) expression -> FN IDENTIFIER LPAREN expressions RPAREN . : STR { statements }
    (47) expression -> FN IDENTIFIER LPAREN expressions RPAREN . : VOID { statements }

    :               shift and go to state 120


state 113

    (52) expression -> FOR LPAREN statement ; expression . ; expression RPAREN { statements }
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

    ;               shift and go to state 121
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50
    WHILE           reduce using rule 10 (statement -> expression .)


state 114

    (53) expression -> statement WHILE LPAREN expression RPAREN { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statement                      shift and go to state 9
    expression                     shift and go to state 11
    statements                     shift and go to state 122

state 115

    (34) expression -> IF LPAREN expression RPAREN { statements . } ELSE { statements }
    (35) expression -> IF LPAREN expression RPAREN { statements . }
    (2) statements -> statements . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    }               shift and go to state 123
    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    expression                     shift and go to state 11
    statement                      shift and go to state 34

state 116

    (40) expression -> FN IDENTIFIER LPAREN RPAREN : INT . { statements }

    {               shift and go to state 124


state 117

    (41) expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT . { statements }

    {               shift and go to state 125


state 118

    (42) expression -> FN IDENTIFIER LPAREN RPAREN : STR . { statements }

    {               shift and go to state 126


state 119

    (43) expression -> FN IDENTIFIER LPAREN RPAREN : VOID . { statements }

    {               shift and go to state 127


state 120

    (44) expression -> FN IDENTIFIER LPAREN expressions RPAREN : . INT { statements }
    (45) expression -> FN IDENTIFIER LPAREN expressions RPAREN : . FLOAT { statements }
    (46) expression -> FN IDENTIFIER LPAREN expressions RPAREN : . STR { statements }
    (47) expression -> FN IDENTIFIER LPAREN expressions RPAREN : . VOID { statements }

    INT             shift and go to state 128
    FLOAT           shift and go to state 129
    STR             shift and go to state 130
    VOID            shift and go to state 131


state 121

    (52) expression -> FOR LPAREN statement ; expression ; . expression RPAREN { statements }
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression

    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IDENTIFIER      shift and go to state 27
    IF              shift and go to state 21
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    STR             shift and go to state 30
    ADAPT           shift and go to state 31
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18

    statement                      shift and go to state 32
    expression                     shift and go to state 132

state 122

    (53) expression -> statement WHILE LPAREN expression RPAREN { statements . }
    (2) statements -> statements . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    }               shift and go to state 133
    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statement                      shift and go to state 34
    expression                     shift and go to state 11

state 123

    (34) expression -> IF LPAREN expression RPAREN { statements } . ELSE { statements }
    (35) expression -> IF LPAREN expression RPAREN { statements } .

    ELSE            shift and go to state 134
    ADD             reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    SUB             reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    DIV             reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    MUL             reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    LE              reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    GE              reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    EQ              reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    NE              reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    GT              reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    LT              reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    AND             reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    OR              reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    INCREMENT       reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    WHILE           reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    }               reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    IDENTIFIER      reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    INT             reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    FLOAT           reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    STR             reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    ADAPT           reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    PRINT           reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    RETURN          reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    LPAREN          reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    DECREMENT       reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    IF              reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    FN              reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    INT_VALUE       reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    FLOAT_VALUE     reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    STRING_VALUE    reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    FOR             reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    RPAREN          reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    ;               reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)
    ,               reduce using rule 35 (expression -> IF LPAREN expression RPAREN { statements } .)


state 124

    (40) expression -> FN IDENTIFIER LPAREN RPAREN : INT { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statements                     shift and go to state 135
    statement                      shift and go to state 9
    expression                     shift and go to state 11

state 125

    (41) expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statements                     shift and go to state 136
    statement                      shift and go to state 9
    expression                     shift and go to state 11

state 126

    (42) expression -> FN IDENTIFIER LPAREN RPAREN : STR { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statements                     shift and go to state 137
    statement                      shift and go to state 9
    expression                     shift and go to state 11

state 127

    (43) expression -> FN IDENTIFIER LPAREN RPAREN : VOID { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statements                     shift and go to state 138
    statement                      shift and go to state 9
    expression                     shift and go to state 11

state 128

    (44) expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT . { statements }

    {               shift and go to state 139


state 129

    (45) expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT . { statements }

    {               shift and go to state 140


state 130

    (46) expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR . { statements }

    {               shift and go to state 141


state 131

    (47) expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID . { statements }

    {               shift and go to state 142


state 132

    (52) expression -> FOR LPAREN statement ; expression ; expression . RPAREN { statements }
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . DIV expression
    (17) expression -> expression . MUL expression
    (20) expression -> expression . LE expression
    (21) expression -> expression . GE expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . NE expression
    (24) expression -> expression . GT expression
    (25) expression -> expression . LT expression
    (26) expression -> expression . AND expression
    (27) expression -> expression . OR expression
    (28) expression -> expression . INCREMENT
    (10) statement -> expression .

    RPAREN          shift and go to state 143
    ADD             shift and go to state 38
    SUB             shift and go to state 39
    DIV             shift and go to state 40
    MUL             shift and go to state 41
    LE              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    GT              shift and go to state 46
    LT              shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    INCREMENT       shift and go to state 50
    WHILE           reduce using rule 10 (statement -> expression .)


state 133

    (53) expression -> statement WHILE LPAREN expression RPAREN { statements } .

    ADD             reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    SUB             reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    DIV             reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    MUL             reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    LE              reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    GE              reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    EQ              reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    NE              reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    GT              reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    LT              reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    AND             reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    OR              reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    INCREMENT       reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    WHILE           reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    }               reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    IDENTIFIER      reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    INT             reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    FLOAT           reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    STR             reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    ADAPT           reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    PRINT           reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    RETURN          reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    LPAREN          reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    DECREMENT       reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    IF              reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    FN              reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    INT_VALUE       reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    FLOAT_VALUE     reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    STRING_VALUE    reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    FOR             reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    RPAREN          reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    ;               reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)
    ,               reduce using rule 53 (expression -> statement WHILE LPAREN expression RPAREN { statements } .)


state 134

    (34) expression -> IF LPAREN expression RPAREN { statements } ELSE . { statements }

    {               shift and go to state 144


state 135

    (40) expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements . }
    (2) statements -> statements . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    }               shift and go to state 145
    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statement                      shift and go to state 34
    expression                     shift and go to state 11

state 136

    (41) expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements . }
    (2) statements -> statements . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    }               shift and go to state 146
    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statement                      shift and go to state 34
    expression                     shift and go to state 11

state 137

    (42) expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements . }
    (2) statements -> statements . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    }               shift and go to state 147
    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statement                      shift and go to state 34
    expression                     shift and go to state 11

state 138

    (43) expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements . }
    (2) statements -> statements . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    }               shift and go to state 148
    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statement                      shift and go to state 34
    expression                     shift and go to state 11

state 139

    (44) expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statements                     shift and go to state 149
    statement                      shift and go to state 9
    expression                     shift and go to state 11

state 140

    (45) expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statements                     shift and go to state 150
    statement                      shift and go to state 9
    expression                     shift and go to state 11

state 141

    (46) expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statements                     shift and go to state 151
    statement                      shift and go to state 9
    expression                     shift and go to state 11

state 142

    (47) expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statements                     shift and go to state 152
    statement                      shift and go to state 9
    expression                     shift and go to state 11

state 143

    (52) expression -> FOR LPAREN statement ; expression ; expression RPAREN . { statements }

    {               shift and go to state 153


state 144

    (34) expression -> IF LPAREN expression RPAREN { statements } ELSE { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    expression                     shift and go to state 11
    statements                     shift and go to state 154
    statement                      shift and go to state 9

state 145

    (40) expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .

    ADD             reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    SUB             reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    DIV             reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    MUL             reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    LE              reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    GE              reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    EQ              reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    NE              reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    GT              reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    LT              reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    AND             reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    OR              reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    INCREMENT       reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    WHILE           reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    }               reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    IDENTIFIER      reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    INT             reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    FLOAT           reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    STR             reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    ADAPT           reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    PRINT           reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    RETURN          reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    LPAREN          reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    DECREMENT       reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    IF              reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    FN              reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    INT_VALUE       reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    FLOAT_VALUE     reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    STRING_VALUE    reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    FOR             reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    RPAREN          reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    ;               reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)
    ,               reduce using rule 40 (expression -> FN IDENTIFIER LPAREN RPAREN : INT { statements } .)


state 146

    (41) expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .

    ADD             reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    SUB             reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    DIV             reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    MUL             reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    LE              reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    GE              reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    EQ              reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    NE              reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    GT              reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    LT              reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    AND             reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    OR              reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    INCREMENT       reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    WHILE           reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    }               reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    IDENTIFIER      reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    INT             reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    FLOAT           reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    STR             reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    ADAPT           reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    PRINT           reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    RETURN          reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    LPAREN          reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    DECREMENT       reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    IF              reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    FN              reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    INT_VALUE       reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    FLOAT_VALUE     reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    STRING_VALUE    reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    FOR             reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    RPAREN          reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    ;               reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)
    ,               reduce using rule 41 (expression -> FN IDENTIFIER LPAREN RPAREN : FLOAT { statements } .)


state 147

    (42) expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .

    ADD             reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    SUB             reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    DIV             reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    MUL             reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    LE              reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    GE              reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    EQ              reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    NE              reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    GT              reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    LT              reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    AND             reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    OR              reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    INCREMENT       reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    WHILE           reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    }               reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    IDENTIFIER      reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    INT             reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    FLOAT           reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    STR             reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    ADAPT           reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    PRINT           reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    RETURN          reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    LPAREN          reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    DECREMENT       reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    IF              reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    FN              reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    INT_VALUE       reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    FLOAT_VALUE     reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    STRING_VALUE    reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    FOR             reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    RPAREN          reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    ;               reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)
    ,               reduce using rule 42 (expression -> FN IDENTIFIER LPAREN RPAREN : STR { statements } .)


state 148

    (43) expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .

    ADD             reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    SUB             reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    DIV             reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    MUL             reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    LE              reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    GE              reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    EQ              reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    NE              reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    GT              reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    LT              reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    AND             reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    OR              reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    INCREMENT       reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    WHILE           reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    }               reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    IDENTIFIER      reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    INT             reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    FLOAT           reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    STR             reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    ADAPT           reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    PRINT           reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    RETURN          reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    LPAREN          reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    DECREMENT       reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    IF              reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    FN              reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    INT_VALUE       reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    FLOAT_VALUE     reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    STRING_VALUE    reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    FOR             reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    RPAREN          reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    ;               reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)
    ,               reduce using rule 43 (expression -> FN IDENTIFIER LPAREN RPAREN : VOID { statements } .)


state 149

    (44) expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements . }
    (2) statements -> statements . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    }               shift and go to state 155
    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statement                      shift and go to state 34
    expression                     shift and go to state 11

state 150

    (45) expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements . }
    (2) statements -> statements . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    }               shift and go to state 156
    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statement                      shift and go to state 34
    expression                     shift and go to state 11

state 151

    (46) expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements . }
    (2) statements -> statements . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    }               shift and go to state 157
    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statement                      shift and go to state 34
    expression                     shift and go to state 11

state 152

    (47) expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements . }
    (2) statements -> statements . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    }               shift and go to state 158
    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statement                      shift and go to state 34
    expression                     shift and go to state 11

state 153

    (52) expression -> FOR LPAREN statement ; expression ; expression RPAREN { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statement                      shift and go to state 9
    expression                     shift and go to state 11
    statements                     shift and go to state 159

state 154

    (34) expression -> IF LPAREN expression RPAREN { statements } ELSE { statements . }
    (2) statements -> statements . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    }               shift and go to state 160
    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    expression                     shift and go to state 11
    statement                      shift and go to state 34

state 155

    (44) expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .

    ADD             reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    SUB             reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    DIV             reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    MUL             reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    LE              reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    GE              reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    EQ              reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    NE              reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    GT              reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    LT              reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    AND             reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    OR              reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    INCREMENT       reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    WHILE           reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    }               reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    IDENTIFIER      reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    INT             reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    FLOAT           reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    STR             reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    ADAPT           reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    PRINT           reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    RETURN          reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    LPAREN          reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    DECREMENT       reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    IF              reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    FN              reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    INT_VALUE       reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    FLOAT_VALUE     reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    STRING_VALUE    reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    FOR             reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    RPAREN          reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    ;               reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)
    ,               reduce using rule 44 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : INT { statements } .)


state 156

    (45) expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .

    ADD             reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    SUB             reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    DIV             reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    MUL             reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    LE              reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    GE              reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    EQ              reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    NE              reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    GT              reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    LT              reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    AND             reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    OR              reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    INCREMENT       reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    WHILE           reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    }               reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    IDENTIFIER      reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    INT             reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    FLOAT           reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    STR             reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    ADAPT           reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    PRINT           reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    RETURN          reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    LPAREN          reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    DECREMENT       reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    IF              reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    FN              reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    INT_VALUE       reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    FLOAT_VALUE     reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    STRING_VALUE    reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    FOR             reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    RPAREN          reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    ;               reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)
    ,               reduce using rule 45 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements } .)


state 157

    (46) expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .

    ADD             reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    SUB             reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    DIV             reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    MUL             reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    LE              reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    GE              reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    EQ              reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    NE              reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    GT              reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    LT              reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    AND             reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    OR              reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    INCREMENT       reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    WHILE           reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    }               reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    IDENTIFIER      reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    INT             reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    FLOAT           reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    STR             reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    ADAPT           reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    PRINT           reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    RETURN          reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    LPAREN          reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    DECREMENT       reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    IF              reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    FN              reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    INT_VALUE       reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    FLOAT_VALUE     reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    STRING_VALUE    reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    FOR             reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    RPAREN          reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    ;               reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)
    ,               reduce using rule 46 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : STR { statements } .)


state 158

    (47) expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .

    ADD             reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    SUB             reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    DIV             reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    MUL             reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    LE              reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    GE              reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    EQ              reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    NE              reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    GT              reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    LT              reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    AND             reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    OR              reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    INCREMENT       reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    WHILE           reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    }               reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    IDENTIFIER      reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    INT             reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    FLOAT           reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    STR             reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    ADAPT           reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    PRINT           reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    RETURN          reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    LPAREN          reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    DECREMENT       reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    IF              reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    FN              reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    INT_VALUE       reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    FLOAT_VALUE     reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    STRING_VALUE    reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    FOR             reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    RPAREN          reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    ;               reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)
    ,               reduce using rule 47 (expression -> FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements } .)


state 159

    (52) expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements . }
    (2) statements -> statements . statement
    (4) statement -> . IDENTIFIER EQUAL expression
    (5) statement -> . IDENTIFIER EQUAL ACCEPT LPAREN RPAREN
    (6) statement -> . INT IDENTIFIER EQUAL expression
    (7) statement -> . FLOAT IDENTIFIER EQUAL expression
    (8) statement -> . STR IDENTIFIER EQUAL expression
    (9) statement -> . ADAPT IDENTIFIER EQUAL expression
    (10) statement -> . expression
    (11) statement -> . PRINT LPAREN expression RPAREN
    (12) statement -> . PRINT LPAREN STRING_VALUE RPAREN
    (13) statement -> . RETURN expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression DIV expression
    (17) expression -> . expression MUL expression
    (18) expression -> . SUB expression
    (19) expression -> . LPAREN expression RPAREN
    (20) expression -> . expression LE expression
    (21) expression -> . expression GE expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression NE expression
    (24) expression -> . expression GT expression
    (25) expression -> . expression LT expression
    (26) expression -> . expression AND expression
    (27) expression -> . expression OR expression
    (28) expression -> . expression INCREMENT
    (29) expression -> . DECREMENT expression
    (33) expression -> . IDENTIFIER LPAREN expressions RPAREN
    (34) expression -> . IF LPAREN expression RPAREN { statements } ELSE { statements }
    (35) expression -> . IF LPAREN expression RPAREN { statements }
    (36) expression -> . INT IDENTIFIER
    (37) expression -> . FLOAT IDENTIFIER
    (38) expression -> . STR IDENTIFIER
    (39) expression -> . ADAPT IDENTIFIER
    (40) expression -> . FN IDENTIFIER LPAREN RPAREN : INT { statements }
    (41) expression -> . FN IDENTIFIER LPAREN RPAREN : FLOAT { statements }
    (42) expression -> . FN IDENTIFIER LPAREN RPAREN : STR { statements }
    (43) expression -> . FN IDENTIFIER LPAREN RPAREN : VOID { statements }
    (44) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : INT { statements }
    (45) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : FLOAT { statements }
    (46) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : STR { statements }
    (47) expression -> . FN IDENTIFIER LPAREN expressions RPAREN : VOID { statements }
    (48) expression -> . INT_VALUE
    (49) expression -> . FLOAT_VALUE
    (50) expression -> . STRING_VALUE
    (51) expression -> . IDENTIFIER
    (52) expression -> . FOR LPAREN statement ; expression ; expression RPAREN { statements }
    (53) expression -> . statement WHILE LPAREN expression RPAREN { statements }

    }               shift and go to state 161
    IDENTIFIER      shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STR             shift and go to state 14
    ADAPT           shift and go to state 15
    PRINT           shift and go to state 16
    RETURN          shift and go to state 18
    SUB             shift and go to state 19
    LPAREN          shift and go to state 7
    DECREMENT       shift and go to state 20
    IF              shift and go to state 21
    FN              shift and go to state 22
    INT_VALUE       shift and go to state 23
    FLOAT_VALUE     shift and go to state 24
    STRING_VALUE    shift and go to state 17
    FOR             shift and go to state 25

    statement                      shift and go to state 34
    expression                     shift and go to state 11

state 160

    (34) expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .

    ADD             reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    SUB             reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    DIV             reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    MUL             reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    LE              reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    GE              reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    EQ              reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    NE              reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    GT              reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    LT              reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    AND             reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    OR              reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    INCREMENT       reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    WHILE           reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    }               reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    IDENTIFIER      reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    INT             reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    FLOAT           reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    STR             reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    ADAPT           reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    PRINT           reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    RETURN          reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    LPAREN          reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    DECREMENT       reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    IF              reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    FN              reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    INT_VALUE       reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    FLOAT_VALUE     reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    STRING_VALUE    reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    FOR             reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    RPAREN          reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    ;               reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)
    ,               reduce using rule 34 (expression -> IF LPAREN expression RPAREN { statements } ELSE { statements } .)


state 161

    (52) expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .

    ADD             reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    SUB             reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    DIV             reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    MUL             reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    LE              reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    GE              reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    EQ              reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    NE              reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    GT              reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    LT              reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    AND             reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    OR              reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    INCREMENT       reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    WHILE           reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    }               reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    IDENTIFIER      reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    INT             reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    FLOAT           reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    STR             reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    ADAPT           reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    PRINT           reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    RETURN          reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    LPAREN          reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    DECREMENT       reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    IF              reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    FN              reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    INT_VALUE       reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    FLOAT_VALUE     reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    STRING_VALUE    reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    FOR             reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    RPAREN          reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    ;               reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)
    ,               reduce using rule 52 (expression -> FOR LPAREN statement ; expression ; expression RPAREN { statements } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 10 resolved as shift
WARNING: shift/reduce conflict for SUB in state 11 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 27 resolved as shift
WARNING: shift/reduce conflict for SUB in state 56 resolved as shift
WARNING: shift/reduce conflict for ADD in state 58 resolved as shift
WARNING: shift/reduce conflict for SUB in state 58 resolved as shift
WARNING: shift/reduce conflict for DIV in state 58 resolved as shift
WARNING: shift/reduce conflict for MUL in state 58 resolved as shift
WARNING: shift/reduce conflict for LE in state 58 resolved as shift
WARNING: shift/reduce conflict for GE in state 58 resolved as shift
WARNING: shift/reduce conflict for EQ in state 58 resolved as shift
WARNING: shift/reduce conflict for NE in state 58 resolved as shift
WARNING: shift/reduce conflict for GT in state 58 resolved as shift
WARNING: shift/reduce conflict for LT in state 58 resolved as shift
WARNING: shift/reduce conflict for AND in state 58 resolved as shift
WARNING: shift/reduce conflict for OR in state 58 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 58 resolved as shift
WARNING: shift/reduce conflict for SUB in state 68 resolved as shift
WARNING: shift/reduce conflict for ADD in state 76 resolved as shift
WARNING: shift/reduce conflict for SUB in state 76 resolved as shift
WARNING: shift/reduce conflict for DIV in state 76 resolved as shift
WARNING: shift/reduce conflict for MUL in state 76 resolved as shift
WARNING: shift/reduce conflict for LE in state 76 resolved as shift
WARNING: shift/reduce conflict for GE in state 76 resolved as shift
WARNING: shift/reduce conflict for EQ in state 76 resolved as shift
WARNING: shift/reduce conflict for NE in state 76 resolved as shift
WARNING: shift/reduce conflict for GT in state 76 resolved as shift
WARNING: shift/reduce conflict for LT in state 76 resolved as shift
WARNING: shift/reduce conflict for AND in state 76 resolved as shift
WARNING: shift/reduce conflict for OR in state 76 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 76 resolved as shift
WARNING: shift/reduce conflict for ADD in state 77 resolved as shift
WARNING: shift/reduce conflict for SUB in state 77 resolved as shift
WARNING: shift/reduce conflict for DIV in state 77 resolved as shift
WARNING: shift/reduce conflict for MUL in state 77 resolved as shift
WARNING: shift/reduce conflict for LE in state 77 resolved as shift
WARNING: shift/reduce conflict for GE in state 77 resolved as shift
WARNING: shift/reduce conflict for EQ in state 77 resolved as shift
WARNING: shift/reduce conflict for NE in state 77 resolved as shift
WARNING: shift/reduce conflict for GT in state 77 resolved as shift
WARNING: shift/reduce conflict for LT in state 77 resolved as shift
WARNING: shift/reduce conflict for AND in state 77 resolved as shift
WARNING: shift/reduce conflict for OR in state 77 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 77 resolved as shift
WARNING: shift/reduce conflict for ADD in state 78 resolved as shift
WARNING: shift/reduce conflict for SUB in state 78 resolved as shift
WARNING: shift/reduce conflict for DIV in state 78 resolved as shift
WARNING: shift/reduce conflict for MUL in state 78 resolved as shift
WARNING: shift/reduce conflict for LE in state 78 resolved as shift
WARNING: shift/reduce conflict for GE in state 78 resolved as shift
WARNING: shift/reduce conflict for EQ in state 78 resolved as shift
WARNING: shift/reduce conflict for NE in state 78 resolved as shift
WARNING: shift/reduce conflict for GT in state 78 resolved as shift
WARNING: shift/reduce conflict for LT in state 78 resolved as shift
WARNING: shift/reduce conflict for AND in state 78 resolved as shift
WARNING: shift/reduce conflict for OR in state 78 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 78 resolved as shift
WARNING: shift/reduce conflict for ADD in state 79 resolved as shift
WARNING: shift/reduce conflict for SUB in state 79 resolved as shift
WARNING: shift/reduce conflict for DIV in state 79 resolved as shift
WARNING: shift/reduce conflict for MUL in state 79 resolved as shift
WARNING: shift/reduce conflict for LE in state 79 resolved as shift
WARNING: shift/reduce conflict for GE in state 79 resolved as shift
WARNING: shift/reduce conflict for EQ in state 79 resolved as shift
WARNING: shift/reduce conflict for NE in state 79 resolved as shift
WARNING: shift/reduce conflict for GT in state 79 resolved as shift
WARNING: shift/reduce conflict for LT in state 79 resolved as shift
WARNING: shift/reduce conflict for AND in state 79 resolved as shift
WARNING: shift/reduce conflict for OR in state 79 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 79 resolved as shift
WARNING: shift/reduce conflict for ADD in state 80 resolved as shift
WARNING: shift/reduce conflict for SUB in state 80 resolved as shift
WARNING: shift/reduce conflict for DIV in state 80 resolved as shift
WARNING: shift/reduce conflict for MUL in state 80 resolved as shift
WARNING: shift/reduce conflict for LE in state 80 resolved as shift
WARNING: shift/reduce conflict for GE in state 80 resolved as shift
WARNING: shift/reduce conflict for EQ in state 80 resolved as shift
WARNING: shift/reduce conflict for NE in state 80 resolved as shift
WARNING: shift/reduce conflict for GT in state 80 resolved as shift
WARNING: shift/reduce conflict for LT in state 80 resolved as shift
WARNING: shift/reduce conflict for AND in state 80 resolved as shift
WARNING: shift/reduce conflict for OR in state 80 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 80 resolved as shift
WARNING: shift/reduce conflict for ADD in state 81 resolved as shift
WARNING: shift/reduce conflict for SUB in state 81 resolved as shift
WARNING: shift/reduce conflict for DIV in state 81 resolved as shift
WARNING: shift/reduce conflict for MUL in state 81 resolved as shift
WARNING: shift/reduce conflict for LE in state 81 resolved as shift
WARNING: shift/reduce conflict for GE in state 81 resolved as shift
WARNING: shift/reduce conflict for EQ in state 81 resolved as shift
WARNING: shift/reduce conflict for NE in state 81 resolved as shift
WARNING: shift/reduce conflict for GT in state 81 resolved as shift
WARNING: shift/reduce conflict for LT in state 81 resolved as shift
WARNING: shift/reduce conflict for AND in state 81 resolved as shift
WARNING: shift/reduce conflict for OR in state 81 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 81 resolved as shift
WARNING: shift/reduce conflict for ADD in state 82 resolved as shift
WARNING: shift/reduce conflict for SUB in state 82 resolved as shift
WARNING: shift/reduce conflict for DIV in state 82 resolved as shift
WARNING: shift/reduce conflict for MUL in state 82 resolved as shift
WARNING: shift/reduce conflict for LE in state 82 resolved as shift
WARNING: shift/reduce conflict for GE in state 82 resolved as shift
WARNING: shift/reduce conflict for EQ in state 82 resolved as shift
WARNING: shift/reduce conflict for NE in state 82 resolved as shift
WARNING: shift/reduce conflict for GT in state 82 resolved as shift
WARNING: shift/reduce conflict for LT in state 82 resolved as shift
WARNING: shift/reduce conflict for AND in state 82 resolved as shift
WARNING: shift/reduce conflict for OR in state 82 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 82 resolved as shift
WARNING: shift/reduce conflict for ADD in state 83 resolved as shift
WARNING: shift/reduce conflict for SUB in state 83 resolved as shift
WARNING: shift/reduce conflict for DIV in state 83 resolved as shift
WARNING: shift/reduce conflict for MUL in state 83 resolved as shift
WARNING: shift/reduce conflict for LE in state 83 resolved as shift
WARNING: shift/reduce conflict for GE in state 83 resolved as shift
WARNING: shift/reduce conflict for EQ in state 83 resolved as shift
WARNING: shift/reduce conflict for NE in state 83 resolved as shift
WARNING: shift/reduce conflict for GT in state 83 resolved as shift
WARNING: shift/reduce conflict for LT in state 83 resolved as shift
WARNING: shift/reduce conflict for AND in state 83 resolved as shift
WARNING: shift/reduce conflict for OR in state 83 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 83 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 89 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 91 resolved as shift
WARNING: shift/reduce conflict for SUB in state 97 resolved as shift
WARNING: shift/reduce conflict for SUB in state 98 resolved as shift
WARNING: shift/reduce conflict for SUB in state 99 resolved as shift
WARNING: shift/reduce conflict for SUB in state 100 resolved as shift
WARNING: reduce/reduce conflict in state 56 resolved using rule (statement -> expression)
WARNING: rejected rule (statement -> RETURN expression) in state 56
WARNING: reduce/reduce conflict in state 57 resolved using rule (statement -> expression)
WARNING: rejected rule (expression -> SUB expression) in state 57
WARNING: reduce/reduce conflict in state 58 resolved using rule (statement -> expression)
WARNING: rejected rule (expression -> DECREMENT expression) in state 58
WARNING: reduce/reduce conflict in state 68 resolved using rule (statement -> IDENTIFIER EQUAL expression)
WARNING: rejected rule (statement -> expression) in state 68
WARNING: reduce/reduce conflict in state 72 resolved using rule (statement -> expression)
WARNING: rejected rule (expression -> expression ADD expression) in state 72
WARNING: reduce/reduce conflict in state 73 resolved using rule (statement -> expression)
WARNING: rejected rule (expression -> expression SUB expression) in state 73
WARNING: reduce/reduce conflict in state 74 resolved using rule (statement -> expression)
WARNING: rejected rule (expression -> expression DIV expression) in state 74
WARNING: reduce/reduce conflict in state 75 resolved using rule (statement -> expression)
WARNING: rejected rule (expression -> expression MUL expression) in state 75
WARNING: reduce/reduce conflict in state 76 resolved using rule (statement -> expression)
WARNING: rejected rule (expression -> expression LE expression) in state 76
WARNING: reduce/reduce conflict in state 77 resolved using rule (statement -> expression)
WARNING: rejected rule (expression -> expression GE expression) in state 77
WARNING: reduce/reduce conflict in state 78 resolved using rule (statement -> expression)
WARNING: rejected rule (expression -> expression EQ expression) in state 78
WARNING: reduce/reduce conflict in state 79 resolved using rule (statement -> expression)
WARNING: rejected rule (expression -> expression NE expression) in state 79
WARNING: reduce/reduce conflict in state 80 resolved using rule (statement -> expression)
WARNING: rejected rule (expression -> expression GT expression) in state 80
WARNING: reduce/reduce conflict in state 81 resolved using rule (statement -> expression)
WARNING: rejected rule (expression -> expression LT expression) in state 81
WARNING: reduce/reduce conflict in state 82 resolved using rule (statement -> expression)
WARNING: rejected rule (expression -> expression AND expression) in state 82
WARNING: reduce/reduce conflict in state 83 resolved using rule (statement -> expression)
WARNING: rejected rule (expression -> expression OR expression) in state 83
WARNING: reduce/reduce conflict in state 97 resolved using rule (statement -> INT IDENTIFIER EQUAL expression)
WARNING: rejected rule (statement -> expression) in state 97
WARNING: reduce/reduce conflict in state 98 resolved using rule (statement -> FLOAT IDENTIFIER EQUAL expression)
WARNING: rejected rule (statement -> expression) in state 98
WARNING: reduce/reduce conflict in state 99 resolved using rule (statement -> STR IDENTIFIER EQUAL expression)
WARNING: rejected rule (statement -> expression) in state 99
WARNING: reduce/reduce conflict in state 100 resolved using rule (statement -> ADAPT IDENTIFIER EQUAL expression)
WARNING: rejected rule (statement -> expression) in state 100
